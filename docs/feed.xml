<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2018-10-15T19:00:00-05:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>An Explanation of Sass and How it Works</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/10/16/post9.html"/>
    <id>http://blog.url.com/gina-blog/2018/10/16/post9.html</id>
    <published>2018-10-15T19:00:00-05:00</published>
    <updated>2018-11-06T17:14:26-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main class="blogposts__container"&gt;
  &lt;header class="header-main"&gt;
    &lt;h1&gt;An Explanation of Sass and How it Works&lt;/h1&gt;
    &lt;time datetime="2018-10-16"&gt;OCTOBER 16, 2018&lt;/time&gt;
  &lt;/header&gt;

  &lt;p&gt;Let's get one thing straight. Although they are often confused because of their similarities, SCSS and Sass are
    &lt;strong&gt;not the same.&lt;/strong&gt; SCSS stands for &lt;em&gt;Syntactically Awesome Stylesheets&lt;/em&gt;, otherwise known as Sassy
    CSS for short. Although SASS and SCSS are similar in that they briefly give an overview of CSS Preprocessing, they
    have different technical syntaxes.&lt;/p&gt;

  &lt;p&gt;SCSS followed the development of SASS, and since it’s an extension of CSS, every valid stylesheet is a valid SCSS
    file with the same meaning. It even understands most CSS vendor-specific syntaxes. It is in support of the idea of
    &lt;strong&gt;DRY&lt;/strong&gt; (don’t repeat yourself) code as opposed to &lt;strong&gt;WET&lt;/strong&gt; code (write every time). Here
    are the key differences between the two more in-depth:&lt;/p&gt;

  &lt;h2&gt;SASS&lt;/h2&gt;
  &lt;hr /&gt;
  &lt;ul class="blogpost--ul-indent"&gt;
    &lt;li&gt;SASS is a program written in Ruby—the technology or programming language that SASS is built on— that
      assembles
      CSS style sheets.&lt;/li&gt;
    &lt;li&gt;Uses indentation instead of brackets to indicate nesting of selectors&lt;/li&gt;
    &lt;li&gt;New lines rather than semicolons to separate properties&lt;/li&gt;
    &lt;li&gt;Employs language extensions (i.e. variables, nested rules, and mixins)&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;SCSS&lt;/h2&gt;
  &lt;hr /&gt;
  &lt;p&gt;Incorporates some commonly used features:&lt;/p&gt;
  &lt;ol class="blogpost--ol-indent"&gt;
    &lt;li&gt;Import&lt;/li&gt;
    &lt;li&gt;Variables&lt;/li&gt;
    &lt;li&gt;Nesting&lt;/li&gt;
    &lt;li&gt;Mixins&lt;/li&gt;
    &lt;li&gt;Operators&lt;/li&gt;
  &lt;/ol&gt;

  &lt;h2&gt;SCSS Features: In-Depth Explanations on How to Use Them&lt;/h2&gt;
  &lt;hr /&gt;
  &lt;p&gt;One of the major benefits of SCSS is that you can separate your code into more
    manageable, logical chunks. SCSS
    allows you the ability to separate your CSS according to different elements or components —buttons, lists,
    forms, colors, typography, etc.— to make them easier to work with and keep
    your stylesheets nice and &lt;strong&gt;DRY&lt;/strong&gt;. There are different file and folder structures that you can follow,
    such as &lt;a href="http://thesassway.com/beginner/how-to-structure-a-sass-project"&gt;The Sass Way&lt;/a&gt; or according to
    &lt;a href="http://bradfrost.com/blog/post/atomic-web-design/"&gt;Brad
      Frost's Atomic
      Design&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;a href="http://thesassway.com/beginner/how-to-structure-a-sass-project"&gt;The Sass Way&lt;/a&gt; of organizing a project
    would
    be by modules, partials, and anything related to vendors (third party
    CSS). &lt;strong&gt;Modules&lt;/strong&gt; would be anything like mixins, functions, and variables.
    &lt;strong&gt;Partials&lt;/strong&gt; would be things like the navigation, footer, buttons, typography, input fields, etc.
    Lastly, the &lt;strong&gt;vendor&lt;/strong&gt; directory would be dedicated to any third-party CSS like any prepackaged
    components, such as color pickers or JQuery UI.&lt;/p&gt;

  &lt;p class="helper-space-bottom"&gt;In terms of &lt;a href="http://bradfrost.com/blog/post/atomic-web-design/"&gt;Brad
      Frost's Atomic
      Design&lt;/a&gt;, although it's a great way to
    organize your
    elements or components, it should be noted that it creates additional complexity when it comes to using that
    methodology for developing your code. The reason behind that is because identifying and classifying atoms are
    straightforward, but determining
    which
    elements or components classify as molecules and
    organisms are where it could lead to one whole big confusing, frustrating mess between you and your teammates. As
    far as achieving business goals with this method especially within large teams, the idea of having constant
    dicsusions to agree upon which is considered which is also quite draining and time
    consuming.&lt;/p&gt;
  &lt;hr /&gt;
  &lt;div class="column"&gt;
    &lt;h4&gt;&lt;strong&gt;@import&lt;/strong&gt;&lt;/h4&gt;
    &lt;p class="typography-p"&gt;Allows you to literally import styles from another stylesheet file into your current
      file, so you can separate your styles into logical files&lt;/p&gt;

    &lt;h4 class="helper-space-bottom"&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h4&gt;
    &lt;code class="helper-space-bottom"&gt;// inside main.scss&lt;br /&gt;
      @import 'typography.css';&lt;br /&gt;
      @import 'header.css';&lt;br /&gt;
      @import 'footer.css';&lt;br /&gt;
    &lt;/code&gt;
  &lt;/div&gt;

  &lt;hr /&gt;
  &lt;div class="column"&gt;
    &lt;h4 class="helper-space-bottom"&gt;&lt;strong&gt;$variables&lt;/strong&gt;&lt;/h4&gt;
    &lt;p class="typography-p"&gt;Defined with a &lt;code&gt;$&lt;/code&gt; symbol, are assigned a value, and allow for global
      changes to all of your files. For example, let’s say that a client or a project calls for a different color,
      it’s
      as simple as updating the variable value and it will be applied everywhere else that you’ve used it. The
      hardest
      part is naming your variable, as you can be as general or generic as you’d like.&lt;/p&gt;

    &lt;h4 class="helper-space-bottom"&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h4&gt;
    &lt;code&gt;// Colors&lt;br /&gt;
      $c-yellow: #fff03b;&lt;br /&gt;
      $c-yellow-dark: #ffe21d;&lt;/code&gt;&lt;br /&gt;

    &lt;code&gt;// Fonts&lt;br /&gt;
      $f-serif: 'Playfair Display', Georgia, Times, 'Times New Roman', serif;&lt;/code&gt;
  &lt;/div&gt;

  &lt;hr /&gt;
  &lt;h4&gt;&lt;strong&gt;Nesting&lt;/strong&gt;&lt;/h4&gt;
  &lt;p&gt;Allows for better organization of your styles and limits repetition. Although this is a great feature, the rule
    is
    to only nest 3 child selectors, as it will aid in preventing confusion from nesting too many elements&lt;/p&gt;

  &lt;hr /&gt;
  &lt;div class="column"&gt;
    &lt;h4&gt;&lt;strong&gt;@mixins&lt;/strong&gt;&lt;/h4&gt;
    &lt;p&gt; Allows you to define a reusable and configurable block of CSS. Mixins are made up of:&lt;/p&gt;
    &lt;ol class="blogpost--ol-indent"&gt;
      &lt;li&gt;The &lt;code&gt;@mixin&lt;/code&gt; directive, where you can also give them variables&lt;/li&gt;
      &lt;li class="typography-p"&gt;CSS Selectors&lt;/li&gt;
    &lt;/ol&gt;

    &lt;h4&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h4&gt;&lt;br /&gt;
    &lt;code class="helper-space-top"&gt;@mixin background-opts ($pos: center, $size: cover, $rep: no-repeat, $color:
      $c-beige) {&lt;br /&gt;
      background-position: $pos;&lt;br /&gt;
      background-size: $size;&lt;br /&gt;
      background-repeat: $rep;&lt;br /&gt;
      background-color: $color;&lt;br /&gt;
      }&lt;/code&gt;
  &lt;/div&gt;

  &lt;hr /&gt;
  &lt;h4&gt;&lt;strong&gt;Operators:&lt;/strong&gt;&lt;/h4&gt;
  &lt;p&gt;Allows you to do math.&lt;/p&gt;
  &lt;code&gt;nav {
    height: $mobile-nav-height;
    @media (min-width:768px) {
    height: $mobile-nav-height \* 2;
    }
    }&lt;/code&gt;

  &lt;h2&gt;So, how do we Sass?&lt;/h2&gt;
  &lt;hr /&gt;
  &lt;ol class="blogpost--ol-indent"&gt;
    &lt;li&gt;Using Terminal in a new tab, ensure that you are in the right directory that &lt;strong&gt;contains&lt;/strong&gt;
      your stylesheets.&lt;/li&gt;
    &lt;li&gt;Run the command &lt;code&gt;sass --watch nameofyourfile.scss:nameofyourfile.css&lt;/code&gt;
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: The purpose of this command is to tell Sass to watch your SCSS files and make it compile
            with CSS. What that means is that we are telling Terminal to "watch" for any changes that we make to our
            Sass file that we want
            reflected in CSS when it gets compiled.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;Using the @import feature, ensure that your Sass files are connected to &lt;strong&gt;one and only one&lt;/strong&gt;
      stylesheet.&lt;/li&gt;
    &lt;li&gt;Connect that one stylesheet that links all of your Sass files together to your main stylesheet for
      your landing page.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/main&gt;
</content>
  </entry>
  <entry>
    <title>An Introduction to Form Design</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/10/12/post8.html"/>
    <id>http://blog.url.com/gina-blog/2018/10/12/post8.html</id>
    <published>2018-10-11T19:00:00-05:00</published>
    <updated>2018-11-06T16:20:30-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main class="blogposts__container"&gt;
  &lt;header&gt;
    &lt;h1&gt;An Introduction to Form Design&lt;/h1&gt;
    &lt;time datetime="2018-10-12"&gt;OCTOBER 12, 2018&lt;/time&gt;
  &lt;/header&gt;

  &lt;p&gt;Let's start from the beginning. Although form design looks like it could be really simple and fun—it certainly is
    and it definitely can be—it is a lot more complex than it appears at face value. Form designs contain quite a few
    smaller elements that make up a larger component. With forms, you have elements like input fields, the placeholder
    text within those input fields, labels, dropdowns, radio buttons, and checkboxes. Additionally, you have to
    consider the
    different states for each of those elements to ensure that it's accessible:&lt;/p&gt;

  &lt;ol class="blogpost--ol-indent"&gt;
    &lt;li&gt;Default&lt;/li&gt;
    &lt;li&gt;Focus&lt;/li&gt;
    &lt;li&gt;Expanded/toggled/selected&lt;/li&gt;
    &lt;li&gt;Disabled&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;Now, don't even get me started about what you would have to do to create custom styles for checkboxes or radio
    buttons! For custom checkboxes, you have to ensure that the checkbox aligns with its container and that the user is
    able to select more than one option. For custom radio buttons, on the other hand, you have to worry about the
    opposite and ensure that user can &lt;strong&gt;only&lt;/strong&gt; be able to select one option. Basically, forms are no joke
    and are definitely not something that you should underestimate!&lt;/p&gt;

  &lt;h2&gt;The Basics of Setting Up Forms&lt;/h2&gt;

  &lt;h4&gt;&lt;strong&gt;INPUT FIELDS&lt;/strong&gt;&lt;/h4&gt;
  &lt;hr /&gt;
  &lt;p&gt;There are three things that go into creating a basic, non-CSS styled input field. There should be a &lt;code&gt;form&lt;/code&gt;
    as the container that holds all the information and enforces semantic HTML, the field label, and the input. The
    input
    usually contains the type, an id, the name (think of this as the purpose of that input), and the placeholder text
    that will be inside of that input field. These labels are all important, as they play into accessibility and the
    way
    that a screen-reader will translate information to those with impairments or disabilities. Take a look at the code
    below:
    &lt;script src="https://gist.github.com/gvaldez8/1615af8befcae87290f0be129f62ebbb.js"&gt;&lt;/script&gt;
  &lt;/p&gt;

  &lt;h4&gt;&lt;strong&gt;DROPDOWNS&lt;/strong&gt;&lt;/h4&gt;
  &lt;hr /&gt;
  &lt;p&gt;Did you know that there are a certain number of options before a set of options &lt;strong&gt;should&lt;/strong&gt; be placed
    into a dropdown? Reference the &lt;a href="https://www.nngroup.com/articles/drop-down-menus/"&gt;Nielsen Norman Group
      Dropdown Guidelines&lt;/a&gt;. Basically, your options should be placed in a dropdown if you have 6–15 options. It
    becomes an issue when the options exceed 15 maximum, as it creates a readability and legibility issue with scanning
    between different options. In the example below, note that the reason that this code is not nested within a &lt;code&gt;form&lt;/code&gt;
    and &lt;code&gt;fieldset&lt;/code&gt; element is because it's assumed that if you have a dropdown, it will more than likely
    already be within a form.

    &lt;script src="https://gist.github.com/gvaldez8/925939b2fac79f8c3c306483b927261f.js"&gt;&lt;/script&gt;
  &lt;/p&gt;

  &lt;h4&gt;&lt;strong&gt;RADIO BUTTONS&lt;/strong&gt;&lt;/h4&gt;
  &lt;hr /&gt;
  &lt;p&gt;There is a diffefrent purpose for when you would use radio buttons as opposed to checkboxes, as they are mutually
    exclusive and &lt;strong&gt;only&lt;/strong&gt; allow the user to select one option. This means that if a user selects one of
    the options, it will automatically deselect the other option. Reference this article from
    &lt;a href="https://www.nngroup.com/articles/checkboxes-vs-radio-buttons/"&gt; Nielsen Norman Group on Checkboxes vs.
      Radio Buttons&lt;/a&gt;. In terms of radio buttons and checkboxes, you will find that the HTML structures are very
    similar to each other. They both start within the &lt;code&gt;form&lt;/code&gt; element to enforce semantic HTML. They both
    are contained in a &lt;code&gt;fieldset&lt;/code&gt; element, which is used to group several controls and labels within a form.
    They both
    incorporate the use of the &lt;code&gt;legend&lt;/code&gt; tag, which represents a caption for the content of its parent.
    They both require an input type, a label, an id, a value, and a "for" attribute that helps identify what number
    radio button or checkbox you are on. Note that the value and the label are the same because it describes what
    that option is. Here's an example below:
    &lt;script src="https://gist.github.com/gvaldez8/62fdc63e39ac26787e72ce52874323da.js"&gt;&lt;/script&gt;
  &lt;/p&gt;

  &lt;h4&gt;&lt;strong&gt;CHECKBOXES&lt;/strong&gt;&lt;/h4&gt;
  &lt;hr /&gt;
  &lt;p&gt;Aside from the fact that you can any number of options for checkboxes, you can also specify an additional
    attribute in the input type, which is checked or unchecked. By default, however, you should always have your
    checkboxes unchecked, as this has been proven through user testing.Reference this article from
    &lt;a href="https://www.nngroup.com/articles/checkboxes-vs-radio-buttons/"&gt; Nielsen Norman Group on Checkboxes vs.
      Radio Buttons&lt;/a&gt;. Take a look at the example below:
    &lt;script src="https://gist.github.com/gvaldez8/c3ef891b0c64af616dda3408c5fcc9f5.js"&gt;&lt;/script&gt;
  &lt;/p&gt;


  &lt;h4&gt;&lt;strong&gt;GREAT RESOURCES AND INSPIRATION&lt;/strong&gt;&lt;/h4&gt;
  &lt;hr /&gt;

  &lt;ul class="blogpost--ul-indent"&gt;
    &lt;li&gt;&lt;a href="https://codepen.io/patterns/"&gt;CodePen.io's Patterns&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://www.nngroup.com/"&gt;Nielsen Norman Group: World Leaders in Research-Based User Experience&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2 class="helper-space-top"&gt;An Example of Form Design&lt;/h2&gt;
  &lt;hr /&gt;
  &lt;p&gt;For this week's blog post prompt, I decided that the purpose of this form was for the user to order a pizza.
    Honestly though, who doesn't like pizza?&lt;/p&gt;

  &lt;form class="form__container--personal"&gt;
    &lt;fieldset class="form__pizza--size"&gt;
      &lt;h3&gt;Hi there, I am &lt;input type="text" id="name" name="name" placeholder="name" /&gt;.&lt;br /&gt;

        I would like to order a pizza for delivery at &lt;br /&gt;

        &lt;input type="text" id="address" name="address" placeholder="address" /&gt;by
        &lt;select id="time-select"&gt;
          &lt;option value="500"&gt;5:00pm&lt;/option&gt;
          &lt;option value="530"&gt;5:30pm&lt;/option&gt;
          &lt;option value="600"&gt;6:00pm&lt;/option&gt;
          &lt;option value="630"&gt;6:30pm&lt;/option&gt;
          &lt;option value="700"&gt;7:00pm&lt;/option&gt;
          &lt;option value="730"&gt;7:30pm&lt;/option&gt;
          &lt;option value="800"&gt;8:00pm&lt;/option&gt;
          &lt;option value="830"&gt;8:30pm&lt;/option&gt;
        &lt;/select&gt;.

        &lt;br /&gt;Feel free to give me a ring or shoot me a text at&lt;br /&gt;

        &lt;input type="text" id="phone-number" name="address" placeholder="(000) 000 0000" /&gt; when you're here.&lt;/h3&gt;
    &lt;/fieldset&gt;
  &lt;/form&gt;

  &lt;br /&gt;

  &lt;form class="form__container--order"&gt;
    &lt;fieldset class="form__pizza--size"&gt;
      &lt;legend&gt;
        &lt;h3&gt;What size pizza would you like to order?&lt;/h3&gt;
      &lt;/legend&gt;
      &lt;hr /&gt;
      &lt;div class="radio-buttons"&gt;
        &lt;input type="radio" id="radio-one" value="small" /&gt;
        &lt;label class="radio" for="radio-one"&gt;Small&lt;/label&gt;
        &lt;input type="radio" id="radio-two" value="medium" /&gt;
        &lt;label class="radio" for="radio-two"&gt;Medium&lt;/label&gt;
        &lt;input type="radio" id="radio-three" value="large" /&gt;
        &lt;label class="radio" for="radio-three"&gt;Large&lt;/label&gt;
        &lt;input type="radio" id="radio-four" value="extra-large" /&gt;
        &lt;label class="radio" for="radio-four"&gt;Extra Large&lt;/label&gt;
      &lt;/div&gt;
    &lt;/fieldset&gt;
  &lt;/form&gt;

  &lt;form class="form__container--order"&gt;
    &lt;fieldset class="form__pizza--diet"&gt;
      &lt;legend&gt;
        &lt;h3&gt;Any dietary restrictions?&lt;/h3&gt;
      &lt;/legend&gt;
      &lt;hr /&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-one" value="vegetarian" check="checked" /&gt;
        &lt;label class="checkbox" for="check-one"&gt;Vegetarian&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-two" value="gluten-free" check="checked" /&gt;
        &lt;label class="checkbox" for="check-two"&gt;Gluten Free&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-three" value="vegan" check="checked" /&gt;
        &lt;label class="checkbox" for="check-three"&gt;Vegan&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-four" value="none" check="checked" /&gt;
        &lt;label class="checkbox" for="check-four"&gt;None&lt;/label&gt;
      &lt;/div&gt;
    &lt;/fieldset&gt;
  &lt;/form&gt;

  &lt;form class="form__container--order"&gt;
    &lt;fieldset class="form__pizza--toppings"&gt;
      &lt;legend&gt;
        &lt;h3&gt;Choose your toppings&lt;/h3&gt;
      &lt;/legend&gt;
      &lt;hr /&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-five" value="extra-cheese" check="checked" /&gt;
        &lt;label class="checkbox" for="check-five"&gt;Extra Cheese&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-six" value="black-olives" check="checked" /&gt;
        &lt;label class="checkbox" for="check-six"&gt;Black Olives&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-seven" value="sausage" check="checked" /&gt;
        &lt;label class="checkbox" for="check-seven"&gt;Sausage&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-eight" value="bacon" check="checked" /&gt;
        &lt;label class="checkbox" for="check-eight"&gt;Bacon&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-nine" value="pepperoni" check="checked" /&gt;
        &lt;label class="checkbox" for="check-nine"&gt;Pepperoni&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-ten" value="tomatoes" check="checked" /&gt;
        &lt;label class="checkbox" for="check-ten"&gt;Tomatoes&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-eleven" value="onions" check="checked" /&gt;
        &lt;label class="checkbox" for="check-eleven"&gt;Onions&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-twelve" value="bell-peppers" check="checked" /&gt;
        &lt;label class="checkbox" for="check-twelve"&gt;Bell Peppers&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-thirteen" value="mushrooms" check="checked" /&gt;
        &lt;label class="checkbox" for="check-thirteen"&gt;Mushrooms&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-fourteen" value="pineapple" check="checked" /&gt;
        &lt;label class="checkbox" for="check-fourteen"&gt;Pineapple&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-fifteen" value="spinach" check="checked" /&gt;
        &lt;label class="checkbox" for="check-fifteen"&gt;Spinach&lt;/label&gt;
      &lt;/div&gt;
    &lt;/fieldset&gt;

  &lt;/form&gt;

  &lt;button&gt;Submit&lt;/button&gt;

&lt;/main&gt;
</content>
  </entry>
  <entry>
    <title>Naming Conventions related to CSS Architecture</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/10/08/post7.html"/>
    <id>http://blog.url.com/gina-blog/2018/10/08/post7.html</id>
    <published>2018-10-07T19:00:00-05:00</published>
    <updated>2018-11-06T16:22:31-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main&gt;
    &lt;header class="header-main"&gt;
        &lt;h1&gt;Naming Conventions&lt;br /&gt; related to CSS Architecture&lt;/h1&gt;
        &lt;time datetime="2018-10-08"&gt;OCTOBER 8, 2018&lt;/time&gt;
    &lt;/header&gt;

    &lt;p&gt;There are three types of Naming Conventions related to CSS Architecture that we'll cover in this post: BEM,
        OOCSS, and SMACSS.&lt;/p&gt;
    &lt;h2&gt;What is BEM?&lt;/h2&gt;
    &lt;hr /&gt;
    &lt;p&gt;The BEM naming convention stands for &lt;em&gt;Block Element Modifier&lt;/em&gt; and is currently the naming convention that
        8th Light sticks to. Reasons that people like this naming convention are because its name declares its purpose,
        thereby making it easier to skim markup and immediately understand how elements are styled or related to one
        another. The point is to keep the names simple, clear, and precise.&lt;/p&gt;
    &lt;div class="column"&gt;
        &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;THE GUIDELINES&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;ol class="blogpost--ol-columns"&gt;
            &lt;li&gt;Names are written in lowercase&lt;/li&gt;
            &lt;li&gt;Words are separated by a hyphen&lt;/li&gt;
            &lt;li&gt;Block name defines the namespace for its elements and modifiers&lt;/li&gt;
            &lt;li&gt;The element is separated from the block name by a double underscore&lt;/li&gt;
            &lt;li&gt;The modifier name is separated from the block or element name by a single underscore&lt;/li&gt;
            &lt;li&gt;The modifier value is separated from the modifier name by a single underscore, double hyphen, or period&lt;/li&gt;
            &lt;li&gt;For boolean modifiers, the value is not included in the name&lt;/li&gt;
        &lt;/ol&gt;
        &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;BENEFITS&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;ul class="blogpost--ul-columns"&gt;
            &lt;li&gt;Works nicely with React&lt;/li&gt;
            &lt;li&gt;Naming things is easy&lt;/li&gt;
            &lt;li&gt;No more classname conflicts&lt;/li&gt;
            &lt;li&gt;Reusability out of the box&lt;/li&gt;
            &lt;li&gt;No specificity races&lt;/li&gt;
            &lt;li&gt;No unexpected side-effects&lt;/li&gt;
            &lt;li&gt;Confidence in changing old css code&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;

    &lt;section&gt;
        &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;HOW IT WORKS&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;p&gt;The block is the whole and the elements are the pieces.&lt;/p&gt;
        &lt;code&gt;.block&lt;/code&gt;
        &lt;p&gt;Each element is written after the block connected by two underscores.&lt;/p&gt;
        &lt;code&gt;.block__element&lt;/code&gt;
        &lt;p&gt;Modifiers are used to style a specific element and are usually separated by a double hyphen after the
            element
            like so:&lt;/p&gt;
        &lt;code&gt;.block__elem--mod&lt;/code&gt;
    &lt;/section&gt;

    &lt;section&gt;
        &lt;h2 class="helper-space-top"&gt;What is OOCSS?&lt;/h2&gt;
        &lt;hr /&gt;
        &lt;p&gt;OSCSS stands for &lt;em&gt;Object oriented CSS&lt;/em&gt;. The object refers to any repeating visual pattern than can be
            specified in snippets of code. The goal of OOCSS is to produce components that are flexible, modular, and
            interchangeable.&lt;/p&gt;

        &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;THE GUIDELINES&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;ol class="blogpost--ol-indent"&gt;
            &lt;li&gt;Separation of Structure and Skin&lt;/li&gt;
            &lt;li&gt;Separation of Container and Content&lt;/li&gt;
        &lt;/ol&gt;

        &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;STRUCTURE VS. SKIN&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;p&gt;The &lt;strong&gt;structure&lt;/strong&gt; of an application refers to anything that is “invisible” to the user,
            such as
            instructions for element size and positioning. It refers to &lt;strong&gt;how things are laid out&lt;/strong&gt;
            like:&lt;/p&gt;
        &lt;ol class="blogpost--ol-indent"&gt;
            &lt;li&gt;height and width&lt;/li&gt;
            &lt;li&gt;margins and padding&lt;/li&gt;
            &lt;li&gt;overflow&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p&gt;The &lt;strong&gt;skin&lt;/strong&gt; is something that users are generally more familiar with, as it refers to
            the
            visual properties of elements. It refers to &lt;strong&gt;what the layout looks like&lt;/strong&gt;:&lt;/p&gt;
        &lt;ol class="blogpost--ol-columns"&gt;
            &lt;li&gt;colors&lt;/li&gt;
            &lt;li&gt;fonts&lt;/li&gt;
            &lt;li&gt;shadows&lt;/li&gt;
            &lt;li&gt;gradients&lt;/li&gt;
        &lt;/ol&gt;

        &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;CONTAINER VS. CONTENT&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt; refers to elements such as images, paragraphs, and div tags that are nested
            within
            other elements, which serve as containers.&lt;/p&gt;

        &lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt; can be represented by a structure class.&lt;/p&gt;
    &lt;/section&gt;

    &lt;section&gt;
        &lt;h2 class="helper-space"&gt;What is SMACSS?&lt;/h2&gt;
        &lt;hr /&gt;
        &lt;p&gt;SMACSS stands for &lt;em&gt;Scalable and Modular Architecture for CSS&lt;/em&gt; and is more of a
            style guide than it is a rigid framework. The purpose of this category is to codify patterns, things that
            repeat themselves within our design, and avoid mixing code of several categories into a single file.&lt;/p&gt;
        &lt;div class="column"&gt;
            &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;THE GUIDELINES IN FIVE CATEGORIES&lt;/strong&gt;&lt;/h5&gt;
            &lt;hr /&gt;
            &lt;ol class="blogpost--ol-columns"&gt;
                &lt;li&gt;&lt;strong&gt;Base:&lt;/strong&gt; These are default values, so things like padding, margin border, font and
                    other
                    properties that are used on the entire website and all elements.&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Layout:&lt;/strong&gt; Divides a page into sections with elements like header, footer, and
                    article.
                    Often developers show layout elements by prefixing the class with l, i.e.`l-header` or `l-footer`&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Modules:&lt;/strong&gt; The reusable, modular elements in the design like the navbar, sidebar,
                    and
                    elements that are repeated on the site.&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;State:&lt;/strong&gt; Describes how our modules or layouts will look when they are in a
                    particular
                    state (i.e. active, inactive, expanded, hidden). These are usually prefixed with `is-`. Examples
                    would
                    be: `is-active`, `is-inactive`, `is-expanded`, and `is-hidden`&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Theme:&lt;/strong&gt; Similar to state rules in that they describe how modules or layouts might
                    look.
                    However, it is more applicable for larger sites with shared elements that look different
                    throughout,
                    such as color scheme or type treatment.&lt;/li&gt;
            &lt;/ol&gt;

            &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;THE GOALS&lt;/strong&gt;&lt;/h5&gt;
            &lt;hr /&gt;
            &lt;ol class="blogpost--ol-columns"&gt;
                &lt;li&gt;Repetition results in less code&lt;/li&gt;
                &lt;li&gt;Easier maintenance&lt;/li&gt;
                &lt;li&gt;Greater consistency in the user experience&lt;/li&gt;
            &lt;/ol&gt;
        &lt;/div&gt;
    &lt;/section&gt;
&lt;/main&gt;
</content>
  </entry>
  <entry>
    <title>Getting Responsive with Media Queries</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/10/03/post6.html"/>
    <id>http://blog.url.com/gina-blog/2018/10/03/post6.html</id>
    <published>2018-10-02T19:00:00-05:00</published>
    <updated>2018-11-06T16:24:11-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main class="blogposts__container"&gt;
 &lt;header&gt;
      &lt;h1&gt;Getting Responsive with Media Queries&lt;/h1&gt;
      &lt;time datetime="2018-10-03"&gt;OCTOBER 3, 2018&lt;/time&gt;
&lt;/header&gt;
   &lt;p&gt;Before we deep dive into the purpose of mobile first design/development, media queries, and how to apply them, we need to understand what responsive web design is and its purpose.&lt;/p&gt;

&lt;h3 class="helper-space-top"&gt;Responsive Web Design&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Responsive web design (RWD) is designing online experiences that adapt to various screen sizes, platforms, and orientations according to user environments. For example, you might use your phone on the train as opposed to your desktop that you use when you're working in the office. You may use a tablet or a kindle to stream movies, play video games, and read e-books.Responsive web design requires the use of CSS media queries—powerful snippets of code that define "breakpoints"—to create flexible grids, layouts, and images that resize and rearrange content (media, images, text, forms) to account for various screen sizes. &lt;strong&gt;Breakpoints&lt;/strong&gt; are the point (in pixels) in which content will resize and rearrange itself to a layout that provides the best experience according to a user's environment. Here's an example below of both responsive web design and breakpoints:&lt;/p&gt;

&amp;lt;%= image_tag "responsive-desktop.png" %&amp;gt;


&lt;h3 class="helper-space-top"&gt;Mobile First Design and Development&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Mobile first design is when you prioritize designing for mobile before considering the designs of the other screen sizes, like tablet and desktop. One reason for doing so is because mobile usage as opposed to desktop usage has increased dramatically. Another reason that it's important is because it helps in selecting and providing only the most essential information. The reason behind this methodology is to account for the user's environment—they could be traveling or commuting, casually walking down the street, lounging around in bed, or even just on the couch in the comfort of their own living room—when interacting with an online experience through mobile. Regardless of where your user might be, their level of focus will ultimately adjust according to the environment. There is also less real estate on a smaller screen. Hence, the reason that the design needs to facilitate that online experience by providing a quick, easily accessible way to locate the information that they need and process it within a limited amount of time. &lt;/p&gt;

&lt;p&gt;Amongst the benefits of focusing on mobile first design is that it is more time efficient and can help to facilitate discussions between stakeholders, product managers, designers, and developers on what information needs to be emphasized and prioritized. It also helps your team understand what is possible according to the limitations of code. Mobile first development, on the other hand, is the actual execution of the visual design for mobile translated into code using CSS media queries and breakpoints.&lt;/p&gt;



&lt;h3 class="helper-space-top"&gt;Media Queries&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Media queries are a feature of CSS that enables web content (media, images, text, forms) to adapt according to different devices, screen sizes, and resolutions. Basically, media queries are what make responsive web design possible. Media queries are called upon in your stylesheets using the &lt;code&gt;@media&lt;/code&gt; rule, followed by a breakpoint, and are nested within a specific CSS property that you want to resize or rearrange.&lt;/p&gt;

&lt;p&gt;The @media rule is followed by a (max-width) or (min-width). It looks like this:&lt;/p&gt;

&lt;code&gt;@media (max-width: breakpoint in pixels)&lt;/code&gt;&lt;br /&gt;

&lt;code&gt;@media (min-width: breakpoint in pixels)&lt;/code&gt;

&lt;p&gt;So, what's the difference? &lt;strong&gt;Max-width&lt;/strong&gt; defines anything below that breakpoint, whereas &lt;strong&gt;min-width&lt;/strong&gt; defines anything above the breakpoint. Note that it is best practice to use min-width.&lt;/p&gt;



&lt;h3 class="helper-space-top"&gt;Defining Breakpoints&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;Now, let's quickly review what breakpoints are:&lt;/p&gt;

&lt;blockquote&gt;Breakpoints are the point (in pixels) in which content will resize and rearrange itself to a layout that provides the best experience according to a user's environment.&lt;/blockquote&gt;

&lt;p&gt;Breakpoints used to be strictly defined according to standard screen sizes: &lt;/p&gt;
&lt;ul class="blogpost--ul-indent"&gt;
    &lt;li&gt;Mobile (usually the iPhone at 320px and 480px)&lt;/li&gt;
    &lt;li&gt;Tablet (usually the iPad at 768px and 1024px)&lt;/li&gt;
    &lt;li&gt;Desktop (above 1024px)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, today technology advances far too quickly with new devices and screen sizes being released into the market every year, so there are far too many to account for between iOS and Android.When determining suitable breakpoints, you should instead, think more about designing for humans and selecting those breakpoints intuitively according to how the content (media, images, text, forms) resizes and rearranges itself according to how the browser width is resized. Also, a good place to start is the aforementioned: designing and developing for mobile first. It is always best to start with the smallest viewport first. "Viewport" is just a fancy term referring to your screen size. &lt;/p&gt;



&lt;h3 class="helper-space-top"&gt;Bringing It Together: Using Media Queries and Breakpoints&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;As we covered earlier, media queries are called upon using the &lt;code&gt;@media&lt;/code&gt; rule, followed by the breakpoint (defined in pixels), and nested under the CSS property in your stylesheet that you would like to be resized and/or rearranged.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;However, the very first thing that you should do is open up your HTML file and insert a self-closing &lt;code&gt;meta&lt;/code&gt; within the &lt;code&gt;head&lt;/code&gt;. Here's an example below of what that might look like:&lt;/p&gt;

&lt;code&gt;

    !DOCTYPE html

    html lang='en'

    meta charset='UTF-8'

    head&amp;gt;

    title&amp;gt;Hello World!/title

    meta name="viewport" content="initial-scale:1.0" width="device-width"/

    /head

&lt;/code&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open up your stylesheet, select a CSS property that you would like to resize and/or rearrange, and add the @media rule followed by (min-width: breakpoint in pixels). For the mobile breakpoint, a great place to start would be with 320px.&lt;/p&gt;


&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To determine your other breakpoints, start resizing your browser width. Observe any awkward instances for type sizes, images, and layouts.&lt;/p&gt;
&lt;/main&gt;
</content>
  </entry>
  <entry>
    <title>An Overview of Typographic History</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/09/26/post5.html"/>
    <id>http://blog.url.com/gina-blog/2018/09/26/post5.html</id>
    <published>2018-09-25T19:00:00-05:00</published>
    <updated>2018-11-06T15:56:29-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main class="blogposts__container"&gt;
  &lt;header&gt;
    &lt;h1&gt;An Overview of Typographic History,&lt;br /&gt; Classifications, and Characteristics&lt;/h1&gt;
    &lt;time datetime="2018-09-26"&gt;SEPTEMBER 26, 2018&lt;/time&gt;
  &lt;/header&gt;
  &lt;p class="typography-p"&gt;Typography is one of the most overlooked but essential forms for communication, readability,
    legibility, and
    accessibility. It is an especially useful tool for graphic designers, visual designers, UI/UX designers, and web
    designers, all of whom create, design, and produce something that plays into a user"s experience or interaction
    with a product. There are six possible categories that typefaces can fall into: blackletter, serif, sans serif,
    modern, slab serif and display. Here’s the low-down:&lt;/p&gt;

  &lt;section class="helper-space-top"&gt;
    &lt;div class="column"&gt;
      &lt;h2 class="typography-h2"&gt;Blackletter (1450)
        &lt;hr /&gt;
      &lt;/h2&gt;
      &lt;p class="typography-p"&gt;Otherwise known as &lt;em&gt;Gothic&lt;/em&gt;, &lt;em&gt;Fraktur&lt;/em&gt;, or &lt;em&gt;Old English&lt;/em&gt; is the
        script of the Middle
        Ages. It was used in the Gutenburg Bible, one of the first books printed in Europe. These typefaces were used
        in early manuscript writing and are characterized by their dramatic thin and thick strokes. Sometimes in other
        forms they will include elaborate swirls in the serifs.&lt;/p&gt;

      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt;Primarily seen and used in early manuscript writing&lt;/li&gt;
        &lt;li&gt;Characterized by dramatic thin and thick strokes&lt;/li&gt;
        &lt;li&gt;Weight is very heavy and dark&lt;/li&gt;
        &lt;li&gt;Almost illegible to the modern eyes&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;section class="helper-space-top"&gt;
    &lt;div class="column"&gt;
      &lt;h2 class="typography-h2"&gt;Serif
        &lt;hr /&gt;
      &lt;/h2&gt;
      &lt;h3&gt;Humanist (1460s – 1470s)&lt;/h3&gt;
      &lt;p class="typography-p"&gt;Sometimes people refer to &lt;em&gt; Humanist &lt;/em&gt; typefaces as &lt;em&gt;Venetian&lt;/em&gt; and have
        strong roots in
        calligraphy modeled on the lighter, more open forms of the Italian humanist writers. The Humanist types were at
        the same time the first roman types. Often derived largely from Roman inscriptions and early serif typefaces,
        Humanist typefaces usually feature the lowercase two-story “a” and “g,” both of which combined makes this
        typeface more legible.&lt;/p&gt;
      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt;Notably calligraphic&lt;/li&gt;
        &lt;li&gt;Sloping cross-bar on the lowercase “e”&lt;/li&gt;
        &lt;li&gt;Usually feature lowercase two-story "a" and "g"&lt;/li&gt;
        &lt;li&gt;Relatively small x-height&lt;/li&gt;
        &lt;li&gt;Low contrast between “thick” and “thin” strokes; little variation in the stroke width&lt;/li&gt;
        &lt;li&gt;Dark visual tone (view the page with half-closed eyes)&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;section class="helper-space-top"&gt;
    &lt;hr /&gt;
    &lt;div class="column"&gt;
      &lt;h3&gt;Old-Style (Late 14th – Mid 18th Century)&lt;/h3&gt;
      &lt;p class="typography-p"&gt;Old Style typefaces are sometimes referred to as &lt;em&gt;Garalde&lt;/em&gt; typefaces, as they were
        developed in the
        late 14th century by Renaissance typographers. In 1401, they birthed the first italic typeface. as they
        demonstrate a greater refinement—to a large extent augmented by the steadily improving skills of punchcutters.&lt;/p&gt;
      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt; Greater contrast between thick and thin strokes&lt;/li&gt;
        &lt;li&gt; Sharper in appearance, more refined&lt;/li&gt;
        &lt;li&gt; Serifs on the ascenders are more wedge shaped&lt;/li&gt;
        &lt;li&gt; Lowercase “e” has a horizontal cross bar&lt;/li&gt;
        &lt;li&gt; More upright stress&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;section class="helper-space-top"&gt;
    &lt;hr /&gt;
    &lt;div class="column"&gt;
      &lt;h3&gt;Transitional (1716 – 1728)&lt;/h3&gt;
      &lt;p class="typography-p"&gt;Transitional typefaces are something referred to as &lt;em&gt;Neoclassical&lt;/em&gt; or &lt;em&gt;Realist&lt;/em&gt;.
        This type was
        introduced by John Baskerville and Pierre Fournier. Baskerville happened to take an interest in printing,
        eventually designing his own type in order to improve upon Caslon’s work. Fournier is remembered today for
        introducing the point system as a way to measure typefaces.&lt;/p&gt;

      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt;Vertical or almost vertical stress in the bowls of lowercase letters: &lt;em&gt; b, c, d, e, g, o, p, q&lt;/em&gt;&lt;/li&gt;
        &lt;li&gt; Greater contrast between thick and thin (sub-) strokes&lt;/li&gt;
        &lt;li&gt;Ascenders are generally more horizontal&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/section&gt;


  &lt;section class="helper-space-top"&gt;
    &lt;div class="column"&gt;
      &lt;h2 class="typography-h2"&gt;Modern or Didone (Late 18th Century)
        &lt;hr /&gt;
      &lt;/h2&gt;

      &lt;p class="typography-p"&gt;Modern typefaces were largely influenced by competitive rivals, Firmin Didot of the Didot
        family’s small
        printing dynasty in France and Giambamtista Bodoni, both of which pushed the limits of type design. Although
        they are always a poor choice for large chunks of text, they are best choices for display type and large sizes
        like titles, which emphasize the elegance of each individual character.&lt;/p&gt;

      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt;High and abrupt contrast between thick and thin strokes&lt;/li&gt;
        &lt;li&gt;Abrupt (unbracketed) hairline (thin) serifs&lt;/li&gt;
        &lt;li&gt;Vertical axis&lt;/li&gt;
        &lt;li&gt;Horizontal stress&lt;/li&gt;
        &lt;li&gt;Small aperture&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;section class="helper-space-top"&gt;
    &lt;div class="column"&gt;
      &lt;h2 class="typography-h2"&gt;Slab Serif or Egyptian (Early 18th Century)
        &lt;hr /&gt;
      &lt;/h2&gt;

      &lt;p class="typography-p"&gt;Slab serifs, otherwise known as &lt;em&gt;Egyptians&lt;/em&gt; were originally created for
        advertising, posters, and other
        large media. They can alternatively be called &lt;em&gt;Mechanicals.&lt;/em&gt;These were the first types designed as
        display type. Vincent Figgins is credited with the first slab serifs, as the earliest specimens were in 1815.
        Slab serif typefaces typically feature abrupt serifs and are usually heavier weights.&lt;/p&gt;

      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt;Heavy weight&lt;/li&gt;
        &lt;li&gt;Low stroke contrast between thin and thick&lt;/li&gt;
        &lt;li&gt;Unbracketed, prominent serifs&lt;/li&gt;
        &lt;li&gt;First typefaces created expressly for display purposes&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;section class="helper-space-top"&gt;
    &lt;div class="column"&gt;
      &lt;h2 class="typography-h2"&gt;Sans Serif
        &lt;hr /&gt;
      &lt;/h2&gt;
      &lt;h3&gt;Geometric&lt;/h3&gt;
      &lt;p class="typography-p"&gt;Geometric typefaces are the &lt;strong&gt;least legible/readable&lt;/strong&gt; of all the sans serif
        typefaces,
        especially for body copy. Geometric typefaces are recommended to be set in short, larger type as opposed to
        longer content like body copy. This type is often described as cold and clinical, yet simple.&lt;/p&gt;

      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt; The least legible of all the typefaces, especially for body text&lt;/li&gt;
        &lt;li&gt; Based on geometric shapes, near perfect circles and squares&lt;/li&gt;
        &lt;li&gt; Modern look and feel&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;section class="helper-space-top"&gt;
    &lt;hr /&gt;
    &lt;div class="column"&gt;
      &lt;h3&gt;Humanist (20th Century)&lt;/h3&gt;

      &lt;p class="typography-p"&gt;Humanist typefaces are said to be the &lt;strong&gt;most legible/readable&lt;/strong&gt; of all the
        sans serif typefaces.
        Like it’s serif counterpart, the Humanist sans serif also shares the calligraphic influence, basing its strokes
        and shapes on forms that originate from the pen or brush. Their proportions are often derived from Roman
        inscriptions and early serif typefaces. The lowercase “a” and “g” are most often two-story, which makes them a
        more legible choice than other sans faces.&lt;/p&gt;

      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt; The most calligraphic&lt;/li&gt;
        &lt;li&gt; Legible/readable of the typefaces&lt;/li&gt;
        &lt;li&gt; Some variation in line width&lt;/li&gt;
        &lt;li&gt; Greater variation in stroke width&lt;/li&gt;
        &lt;li&gt; Character by the presence of gentler, more natural curves&lt;/li&gt;
      &lt;/ul&gt;

    &lt;/div&gt;
  &lt;/section&gt;

  &lt;section class="helper-space-top"&gt;
    &lt;hr /&gt;
    &lt;div class="column"&gt;
      &lt;h3&gt;Grotesque or Grotesk (19th – Early 20th Century)&lt;/h3&gt;

      &lt;p class="typography-p"&gt;Grotesques have a tendency to feature awkward weigh distribution around bowls of
        characters and irregular
        curves. They usually feature an awkward “a” and “g” with squarish bowls, odd curves and angles sat the tips of
        strokes in the “J” and “S” and overall irregularity.&lt;/p&gt;

      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt; Spurred “G”, as well as squarish bowls of lowercase “a” and “g”&lt;/li&gt;
        &lt;li&gt; Obvious stoke contrast, tending to display some variation in thickness of strokes but no calligraphic
          influence of logical pattern&lt;/li&gt;
        &lt;li&gt; Proportional idiosyncrasies&lt;/li&gt;
        &lt;li&gt; Tall x-height with a vertical axis&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/section&gt;
&lt;/main&gt;
</content>
  </entry>
  <entry>
    <title>How to be a User Experience Team of One</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/09/21/post4.html"/>
    <id>http://blog.url.com/gina-blog/2018/09/21/post4.html</id>
    <published>2018-09-20T19:00:00-05:00</published>
    <updated>2018-11-06T20:16:48-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main class="blogposts__container"&gt;
  &lt;header&gt;
    &lt;h1&gt;How to be a User Experience Team of One&lt;/h1&gt;
    &lt;time datetime="2018-11-21"&gt;SEPTEMBER 21, 2018&lt;/time&gt;
  &lt;/header&gt;
  
  &lt;p&gt;Leah Buley is a UX designer with over a decade of experience in building digital products. Her book, &lt;em&gt;The User Experience Team of One&lt;/em&gt;, is intended to inform the aspiring UX designer or design student about the fundamentals of UX, as well as to help the soloist UX professional review basic knowledge and tools; implement research, approaches to giving/receiving feedback, and user testing methods; and developing business skills in time management and communication; and building relationships/communities with people and navigating client relationships.&lt;/p&gt;
  
  &lt;p&gt;&lt;em&gt;The User Experience Team of One&lt;/em&gt; offers solid approaches and processes in UX and visual design to help build successful user experiences within organizational structures ranging from startup level to Fortune 500.The User Experience Team of One/ begins with defining what exactly user experience is, covering a brief history of how the term|career came to fruition, the difference between User Experience (UX) and User Interface (UI), the diverse backgrounds that UX professionals stem from, and the typical UX process (i.e. discovery, strategy, research, design, and implementation). The book emphasizes how it is equally important to build communities and relationships with the people that make up organizational structures, and in doing so, it will encourage the support and willingness from others to participate in work processes. Overall, the book begins with promoting the idea of working /with/ others as opposed to /against/ them by getting to know them on a professional and personal level, helping them understand the UX process, and giving others the opportunity to have conversations about compromises and trade-offs early on.&lt;/p&gt;
  
  &lt;p&gt;Towards the middle, the book proposes answers to handling common objections respectfully and encourages seeing these objections more as opportunities than threats because they are invitations to direct, honest conversations. Some common objections from stakeholders or team members that the book covers are when others:&lt;/p&gt;
  
  &lt;ul class="blogpost--ul-indent"&gt;
    &lt;li&gt;Underestimate the importance of web design&lt;/li&gt;
    &lt;li&gt;Equate UX Research to Market Research&lt;/li&gt;
    &lt;li&gt;Consider UX as too expensive and time consuming&lt;/li&gt;
    &lt;li&gt;Value statistical significance over UX&lt;/li&gt;
    &lt;li&gt;Are “already” aware of what their problems are&lt;/li&gt;
    &lt;li&gt;Claim that it’s [&lt;em&gt;marketing/engineering/product management&lt;/em&gt;]’s job&lt;/li&gt;
  &lt;/ul&gt;
  
  &lt;p&gt;From this section, the book elaborates on how the reader can become an overall better professional and individual by providing resources for professional associations, online communities, and meet ups to join. Additionally, the book offers helpful websites, books, classes and organizations, and conferences to attend, all the while encouraging the reader to find a buddy or mentor that can help in their career pursuits.  After offering resources, the book suggests that you define your goals, whether it be within an organization to help your company develop a solid UX process with strategic planning and metrics or to branch off independently, so that you can better position yourself in the market as a specialist, generalist or consultant. It briefly covers payment, negotiation, time management, and feedback.&lt;/p&gt;
  
  &lt;p&gt;Lastly, this book covers methods for planning, discovery, research, design, and implementation (testing and validation). The methods that were covered under each category:&lt;/p&gt;
  
  &lt;ul class="blogpost--ul-indent"&gt;
    &lt;li&gt;&lt;strong&gt;Planning and Discovery:&lt;/strong&gt; UX Questionaire, UX Project Plan, Listening Tour, Opportunity Workshop, Project Brief, Strategy Workshop.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Research:&lt;/strong&gt; Learning Plan, Guerrilla User Research, Proto-Personas, Heuristic Markup, Comparative Assessment, Content Patterns.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Design:&lt;/strong&gt; Design Brief, Design Principles, Sketching, Sketchboards, Task Flows, Wireframes. &lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Testing and Validation:&lt;/strong&gt; Paper and interactive prototypes, Black Hat Sessions, Quick-and-Dirty Usability Test, Five-Second Test, UX Health Check. &lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Evangelism Methods:&lt;/strong&gt; Bathroom UX, Mini Case Studies, Peer-to-Peer Learning Community, Pyramid Evangelism.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/main&gt;
</content>
  </entry>
</feed>
