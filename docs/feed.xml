<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2018-10-15T19:00:00-05:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>The Differences between SCSS and Sass</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/10/16/post10.html"/>
    <id>http://blog.url.com/gina-blog/2018/10/16/post10.html</id>
    <published>2018-10-15T19:00:00-05:00</published>
    <updated>2018-11-05T14:33:43-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main class="blogposts__container"&gt;
  &lt;header class="header-main"&gt;
    &lt;h1&gt;What is the difference between SCSS and Sass? How do you use it and how does it work?&lt;/h1&gt;
    &lt;time datetime="2018-10-16"&gt;OCTOBER 16, 2018&lt;/time&gt;
  &lt;/header&gt;

  &lt;h2&gt;SASS vs. SCSS&lt;/h2&gt;
  &lt;hr /&gt;
  &lt;p&gt;SCSS stands for &lt;em&gt;Syntactically Awesome Stylesheets&lt;/em&gt;, otherwise Sassy CSS for short. Although SASS and SCSS
    are similar in that they briefly give an overview of CSS Preprocessing, they have different technical syntaxes.SCSS
    followed the development of SASS, and since it’s an extension of CSS, every valid stylesheet is a valid SCSS file
    with the same meaning. It even understands most CSS vendor-specific syntaxes. It is in support of the idea of
    &lt;strong&gt;DRY&lt;/strong&gt; (don’t repeat yourself) code as opposed to &lt;strong&gt;WET&lt;/strong&gt; code (write every time).Here
    are the key differences between the two:&lt;/p&gt;

  &lt;h2&gt;SASS&lt;/h2&gt;
  &lt;hr /&gt;
  &lt;ul class="blogpost--ul-indent"&gt;
    &lt;li&gt;SASS is a program written in Ruby—the technology or programming language that SASS is built on— that
      assembles
      CSS style sheets.&lt;/li&gt;
    &lt;li&gt;Uses indentation instead of brackets to indicate nesting of selectors&lt;/li&gt;
    &lt;li&gt;New lines rather than semicolons to separate properties&lt;/li&gt;
    &lt;li&gt;Employs language extensions (i.e. variables, nested rules, and mixins)&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;SCSS&lt;/h2&gt;
  &lt;hr /&gt;
  &lt;p&gt;Incorporates some commonly used features:&lt;/p&gt;
  &lt;ol class="blogpost--ol-indent"&gt;
    &lt;li&gt;Import&lt;/li&gt;
    &lt;li&gt;Variables&lt;/li&gt;
    &lt;li&gt;Nesting&lt;/li&gt;
    &lt;li&gt;Mixins&lt;/li&gt;
    &lt;li class="helper-space-bottom"&gt;Operators&lt;/li&gt;
  &lt;/ol&gt;

  &lt;hr /&gt;
  &lt;div class="column"&gt;
    &lt;h4&gt;&lt;strong&gt;@import&lt;/strong&gt;&lt;/h4&gt;
    &lt;p class="typography-p"&gt;Allows you to literally import styles from another stylesheet file into your current
      file, so you can separate your styles into logical files&lt;/p&gt;

    &lt;h4 class="helper-space-bottom"&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h4&gt;
    &lt;code class="helper-space-bottom"&gt;// inside main.scss&lt;br /&gt;
      @import “typography”&lt;br /&gt;
      @import “header”&lt;br /&gt;
      @import “footer”&lt;br /&gt;
    &lt;/code&gt;
  &lt;/div&gt;

  &lt;hr /&gt;
  &lt;div class="column"&gt;
    &lt;h4 class="helper-space-bottom"&gt;&lt;strong&gt;$variables&lt;/strong&gt;&lt;/h4&gt;
    &lt;p class="typography-p"&gt;Defined with a &lt;code&gt;$&lt;/code&gt; symbol, are assigned a value, and allow for global
      changes to all of your files. For example, let’s say that a client or a project calls for a different color, it’s
      as simple as updating the variable value and it will be applied everywhere else that you’ve used it. The hardest
      part is naming your variable, as you can be as general or generic as you’d like.&lt;/p&gt;

    &lt;h4 class="helper-space-top"&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h4&gt;
    &lt;code&gt;// Colors&lt;br /&gt;
      $c-yellow: #fff03b;&lt;br /&gt;
      $c-yellow-dark: #ffe21d;&lt;/code&gt;

    &lt;code&gt;// Fonts
      $f-serif: 'Playfair Display', Georgia, Times, 'Times New Roman', serif;&lt;/code&gt;
  &lt;/div&gt;

  &lt;hr /&gt;
  &lt;h4&gt;&lt;strong&gt;Nesting&lt;/strong&gt;&lt;/h4&gt;
  &lt;p&gt;Allows for better organization of your styles and limits repetition. Although this is a great feature, the rule is
    to only nest 3 child selectors, as it will aid in preventing confusion from nesting too many elements&lt;/p&gt;

  &lt;hr /&gt;
  &lt;div class="column"&gt;
    &lt;h4&gt;&lt;strong&gt;@mixins&lt;/strong&gt;&lt;/h4&gt;
    &lt;p&gt; Allows you to define a reusable and configurable block of CSS. Mixins are made up of:&lt;/p&gt;
    &lt;ol class="blogpost--ol-indent"&gt;
      &lt;li&gt;The &lt;code&gt;@mixin&lt;/code&gt; directive, where you can also give them variables&lt;/li&gt;
      &lt;li class="typography-p"&gt;CSS Selectors&lt;/li&gt;
    &lt;/ol&gt;

    &lt;h4&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h4&gt;&lt;br /&gt;
    &lt;code class="helper-space-top"&gt;@mixin background-opts ($pos: center, $size: cover, $rep: no-repeat, $color:
      $c-beige) {&lt;br /&gt;
      background-position: $pos;&lt;br /&gt;
      background-size: $size;&lt;br /&gt;
      background-repeat: $rep;&lt;br /&gt;
      background-color: $color;&lt;br /&gt;
      }&lt;/code&gt;
  &lt;/div&gt;

  &lt;hr /&gt;
  &lt;h4&gt;&lt;strong&gt;Operators:&lt;/strong&gt;&lt;/h4&gt;
  &lt;p&gt;Allows you to do math.&lt;/p&gt;
  &lt;code&gt;nav {
    height: $mobile-nav-height;
    @media (min-width:768px) {
    height: $mobile-nav-height \* 2;
    }
    }&lt;/code&gt;

  &lt;h2&gt;So, how do we Sass?&lt;/h2&gt;
  &lt;hr /&gt;
  &lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;You need to tell Sass to watch your SCSS files and make it compile with CSS. On the
    command line in terminal, type the following command:&lt;/em&gt;&lt;br /&gt;
  &lt;code&gt;sass --watch scss:css&lt;/code&gt;

  &lt;p&gt;But what does it mean to “watch”? The &lt;code&gt;watch&lt;/code&gt; command is not a command, but rather, a flag. This flag
    tells
    Sass to “pay attention” to the folders, so when you apply changes to SCSS, Sass will detect the change and
    compile the SCSS file into the final CSS file.&lt;/p&gt;
&lt;/main&gt;
</content>
  </entry>
  <entry>
    <title>An Introduction to Form Design</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/10/09/post9.html"/>
    <id>http://blog.url.com/gina-blog/2018/10/09/post9.html</id>
    <published>2018-10-08T19:00:00-05:00</published>
    <updated>2018-11-05T14:34:04-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main class="blogposts__container"&gt;
  &lt;header&gt;
    &lt;h2&gt;An Introduction to Form Design&lt;/h2&gt;
    &lt;time datetime="2018-10-12"&gt;OCTOBER 12, 2018&lt;/time&gt;
  &lt;/header&gt;

  &lt;p&gt;The user is planning to order a pizza for delivery.&lt;/p&gt;

  &lt;form class="form__container--personal"&gt;
    &lt;h3&gt;Hi there, I am &lt;input type="text" id="name" name="name" placeholder="name" /&gt;.&lt;br /&gt;

      I would like to order a pizza for delivery at &lt;br /&gt;

      &lt;input type="text" id="address" name="address" placeholder="address" /&gt;by
      &lt;select id="time-select"&gt;
        &lt;option value="500"&gt;5:00pm&lt;/option&gt;
        &lt;option value="530"&gt;5:30pm&lt;/option&gt;
        &lt;option value="600"&gt;6:00pm&lt;/option&gt;
        &lt;option value="630"&gt;6:30pm&lt;/option&gt;
        &lt;option value="700"&gt;7:00pm&lt;/option&gt;
        &lt;option value="730"&gt;7:30pm&lt;/option&gt;
        &lt;option value="800"&gt;8:00pm&lt;/option&gt;
        &lt;option value="830"&gt;8:30pm&lt;/option&gt;
      &lt;/select&gt;.

      &lt;br /&gt;Feel free to give me a ring or shoot me a text at&lt;br /&gt;

      &lt;input type="text" id="phone-number" name="address" placeholder="(000) 000 0000" /&gt; when you're here.&lt;/h3&gt;

  &lt;/form&gt;

  &lt;br /&gt;

  &lt;form class="form__container--order"&gt;
    &lt;fieldset class="form__pizza--size"&gt;
      &lt;legend&gt;
        &lt;h3&gt;What size pizza would you like to order?&lt;/h3&gt;
      &lt;/legend&gt;
      &lt;hr /&gt;
      &lt;div class="radio-buttons"&gt;
        &lt;input type="radio" id="radio-one" value="small" /&gt;
        &lt;label class="radio" for="radio-one"&gt;Small&lt;/label&gt;
        &lt;input type="radio" id="radio-two" value="medium" /&gt;
        &lt;label class="radio" for="radio-two"&gt;Medium&lt;/label&gt;
        &lt;input type="radio" id="radio-three" value="large" /&gt;
        &lt;label class="radio" for="radio-three"&gt;Large&lt;/label&gt;
        &lt;input type="radio" id="radio-four" value="extra-large" /&gt;
        &lt;label class="radio" for="radio-four"&gt;Extra Large&lt;/label&gt;
      &lt;/div&gt;
    &lt;/fieldset&gt;
  &lt;/form&gt;

  &lt;form class="form__container--order"&gt;
    &lt;fieldset class="form__pizza--diet"&gt;
      &lt;legend&gt;
        &lt;h3&gt;Any dietary restrictions?&lt;/h3&gt;
      &lt;/legend&gt;
      &lt;hr /&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-one" value="vegetarian" check="checked" /&gt;
        &lt;label class="checkbox" for="check-one"&gt;Vegetarian&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-two" value="gluten-free" check="checked" /&gt;
        &lt;label class="checkbox" for="check-two"&gt;Gluten Free&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-three" value="vegan" check="checked" /&gt;
        &lt;label class="checkbox" for="check-three"&gt;Vegan&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-four" value="none" check="checked" /&gt;
        &lt;label class="checkbox" for="check-four"&gt;None&lt;/label&gt;
      &lt;/div&gt;
    &lt;/fieldset&gt;
  &lt;/form&gt;

  &lt;form class="form__container--order"&gt;
    &lt;fieldset class="form__pizza--toppings"&gt;
      &lt;legend&gt;
        &lt;h3&gt;Choose your toppings&lt;/h3&gt;
      &lt;/legend&gt;
      &lt;hr /&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-five" value="extra-cheese" check="checked" /&gt;
        &lt;label class="checkbox" for="check-five"&gt;Extra Cheese&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-six" value="black-olives" check="checked" /&gt;
        &lt;label class="checkbox" for="check-six"&gt;Black Olives&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-seven" value="sausage" check="checked" /&gt;
        &lt;label class="checkbox" for="check-seven"&gt;Sausage&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-eight" value="bacon" check="checked" /&gt;
        &lt;label class="checkbox" for="check-eight"&gt;Bacon&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-nine" value="pepperoni" check="checked" /&gt;
        &lt;label class="checkbox" for="check-nine"&gt;Pepperoni&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-ten" value="tomatoes" check="checked" /&gt;
        &lt;label class="checkbox" for="check-ten"&gt;Tomatoes&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-eleven" value="onions" check="checked" /&gt;
        &lt;label class="checkbox" for="check-eleven"&gt;Onions&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-twelve" value="bell-peppers" check="checked" /&gt;
        &lt;label class="checkbox" for="check-twelve"&gt;Bell Peppers&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-thirteen" value="mushrooms" check="checked" /&gt;
        &lt;label class="checkbox" for="check-thirteen"&gt;Mushrooms&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-fourteen" value="pineapple" check="checked" /&gt;
        &lt;label class="checkbox" for="check-fourteen"&gt;Pineapple&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-fifteen" value="spinach" check="checked" /&gt;
        &lt;label class="checkbox" for="check-fifteen"&gt;Spinach&lt;/label&gt;
      &lt;/div&gt;
    &lt;/fieldset&gt;

  &lt;/form&gt;

  &lt;button&gt;Submit&lt;/button&gt;

&lt;/main&gt;
</content>
  </entry>
  <entry>
    <title>An Explanation of CSS Architecture/Naming Conventions</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/10/08/post8.html"/>
    <id>http://blog.url.com/gina-blog/2018/10/08/post8.html</id>
    <published>2018-10-07T19:00:00-05:00</published>
    <updated>2018-11-05T14:05:45-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main&gt;
    &lt;header class="header-main"&gt;
        &lt;h1&gt;An Explanation of CSS Architecture/Naming Conventions (BEM, OOCSS, SMACSS)&lt;/h1&gt;
        &lt;time datetime="2018-11-21"&gt;OCTOBER 8, 2018&lt;/time&gt;
    &lt;/header&gt;
    &lt;h2&gt;What is BEM?&lt;/h2&gt;
    &lt;p&gt;The BEM naming convention stands for &lt;em&gt;Block Element Modifier&lt;/em&gt; and is currently the naming convention that
        8th Light sticks to. Reasons that people like this naming convention are because its name declares its purpose,
        thereby making it easier to skim markup and immediately understand how elements are styled or related to one
        another. The post is to keep the names simple, clear, and precise.&lt;/p&gt;
    &lt;div class="column"&gt;
        &lt;h5 class="helper-space"&gt;&lt;strong&gt;THE GUIDELINES&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;ol class="blogpost--ol-columns"&gt;
            &lt;li&gt;Names are written in lowercase&lt;/li&gt;
            &lt;li&gt;Words are separated by a hyphen&lt;/li&gt;
            &lt;li&gt;Block name defines the namespace for its elements and modifiers&lt;/li&gt;
            &lt;li&gt;The element is separated from the block name by a double underscore&lt;/li&gt;
            &lt;li&gt;The modifier name is separated from the block or element name by a single underscore&lt;/li&gt;
            &lt;li&gt;The modifier value is separated from the modifier name by a single underscore, double hyphen, or period&lt;/li&gt;
            &lt;li&gt;For boolean modifiers, the value is not included in the name&lt;/li&gt;
        &lt;/ol&gt;
        &lt;h5 class="helper-space"&gt;&lt;strong&gt;BENEFITS&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;ul class="blogpost--ul-columns"&gt;
            &lt;li&gt;Works nicely with React&lt;/li&gt;
            &lt;li&gt;Naming things is easy&lt;/li&gt;
            &lt;li&gt;No more classname conflicts&lt;/li&gt;
            &lt;li&gt;Reusability out of the box&lt;/li&gt;
            &lt;li&gt;No specificity races&lt;/li&gt;
            &lt;li&gt;No unexpected side-effects&lt;/li&gt;
            &lt;li&gt;Confidence in changing old css code&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;

    &lt;section&gt;
        &lt;h5 class="helper-space"&gt;&lt;strong&gt;HOW IT WORKS&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;p&gt;The block is the whole and the elements are the pieces.&lt;/p&gt;
        &lt;code&gt;.block&lt;/code&gt;
        &lt;p&gt;Each element is written after the block connected by two underscores.&lt;/p&gt;
        &lt;code&gt;.block__element&lt;/code&gt;
        &lt;p&gt;Modifiers are used to style a specific element and are usually separated by a double hyphen after the
            element
            like so:&lt;/p&gt;
        &lt;code&gt;.block__elem--mod&lt;/code&gt;
    &lt;/section&gt;

    &lt;section&gt;
        &lt;h2 class="helper-space"&gt;What is OOCSS?&lt;/h2&gt;
        &lt;p&gt;OSCSS stands for &lt;em&gt;Object oriented CSS&lt;/em&gt;. The object refers to any repeating visual pattern than can be
            specified in snippets of code. The goal of OOCSS is to produce components that are flexible, modular, and
            interchangeable.&lt;/p&gt;

        &lt;h5 class="helper-space"&gt;&lt;strong&gt;THE GUIDELINES&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;ol class="blogpost--ol-indent"&gt;
            &lt;li&gt;Separation of Structure and Skin&lt;/li&gt;
            &lt;li&gt;Separation of Container and Content&lt;/li&gt;
        &lt;/ol&gt;

        &lt;h5 class="helper-space"&gt;&lt;strong&gt;STRUCTURE VS. SKIN&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;p&gt;The &lt;strong&gt;structure&lt;/strong&gt; of an application refers to anything that is “invisible” to the user,
            such as
            instructions for element size and positioning. It refers to &lt;strong&gt;how things are laid out&lt;/strong&gt;
            like:&lt;/p&gt;
        &lt;ol class="blogpost--ol-indent"&gt;
            &lt;li&gt;height and width&lt;/li&gt;
            &lt;li&gt;margins and padding&lt;/li&gt;
            &lt;li&gt;overflow&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p&gt;The &lt;strong&gt;skin&lt;/strong&gt; is something that users are generally more familiar with, as it refers to
            the
            visual properties of elements. It refers to &lt;strong&gt;what the layout looks like&lt;/strong&gt;:&lt;/p&gt;
        &lt;ol class="blogpost--ol-columns"&gt;
            &lt;li&gt;colors&lt;/li&gt;
            &lt;li&gt;fonts&lt;/li&gt;
            &lt;li&gt;shadows&lt;/li&gt;
            &lt;li&gt;gradients&lt;/li&gt;
        &lt;/ol&gt;

        &lt;h5 class="helper-space"&gt;&lt;strong&gt;CONTAINER VS. CONTENT&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt; refers to elements such as images, paragraphs, and div tags that are nested
            within
            other elements, which serve as containers.&lt;/p&gt;

        &lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt; can be represented by a structure class.&lt;/p&gt;
    &lt;/section&gt;

    &lt;section&gt;
        &lt;h2 class="helper-space"&gt;What is SMACSS?&lt;/h2&gt;
        &lt;p&gt;SMACSS stands for &lt;em&gt;Scalable and Modular Architecture for CSS&lt;/em&gt; and is more of a
            style guide than it is a rigid framework. The purpose of this category is to codify patterns, things that
            repeat themselves within our design, and avoid mixing code of several categories into a single file.&lt;/p&gt;
        &lt;div class="column"&gt;
            &lt;h5 class="helper-space"&gt;&lt;strong&gt;THE GUIDELINES IN FIVE CATEGORIES&lt;/strong&gt;&lt;/h5&gt;
            &lt;hr /&gt;
            &lt;ol class="blogpost--ol-columns"&gt;
                &lt;li&gt;&lt;strong&gt;Base:&lt;/strong&gt; These are default values, so things like padding, margin border, font and
                    other
                    properties that are used on the entire website and all elements.&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Layout:&lt;/strong&gt; Divides a page into sections with elements like header, footer, and
                    article.
                    Often developers show layout elements by prefixing the class with l, i.e.`l-header` or `l-footer`&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Modules:&lt;/strong&gt; The reusable, modular elements in the design like the navbar, sidebar,
                    and
                    elements that are repeated on the site.&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;State:&lt;/strong&gt; Describes how our modules or layouts will look when they are in a
                    particular
                    state (i.e. active, inactive, expanded, hidden). These are usually prefixed with `is-`. Examples
                    would
                    be: `is-active`, `is-inactive`, `is-expanded`, and `is-hidden`&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Theme:&lt;/strong&gt; Similar to state rules in that they describe how modules or layouts might
                    look.
                    However, it is more applicable for larger sites with shared elements that look different
                    throughout,
                    such as color scheme or type treatment.&lt;/li&gt;
            &lt;/ol&gt;

            &lt;h5 class="helper-space"&gt;&lt;strong&gt;THE GOALS&lt;/strong&gt;&lt;/h5&gt;
            &lt;hr /&gt;
            &lt;ol class="blogpost--ol-columns"&gt;
                &lt;li&gt;Repetition results in less code&lt;/li&gt;
                &lt;li&gt;Easier maintenance&lt;/li&gt;
                &lt;li&gt;Greater consistency in the user experience&lt;/li&gt;
            &lt;/ol&gt;
        &lt;/div&gt;
    &lt;/section&gt;
&lt;/main&gt;
</content>
  </entry>
  <entry>
    <title>Identifying what CSS Media Queries are and how to use them</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/10/03/post7.html"/>
    <id>http://blog.url.com/gina-blog/2018/10/03/post7.html</id>
    <published>2018-10-02T19:00:00-05:00</published>
    <updated>2018-11-05T14:05:45-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main class="blogposts__container"&gt;
      &lt;header&gt;
      &lt;h1&gt;An Explanation of&lt;br /&gt; CSS Media Queries and How to Use Them&lt;/h1&gt;
      &lt;time datetime="2018-10-3"&gt;OCTOBER 3, 2018&lt;/time&gt;
    &lt;/header&gt;
    &lt;p&gt;To incorporate media queries into your webpage, you first need to insert a self-closing &lt;code&gt;&amp;#60;meta&amp;#62;&lt;/code&gt; within the &lt;code&gt;&amp;#60;head&amp;#62;&lt;/code&gt; of your HTML file, like in the example below:&lt;/p&gt;

    &lt;code&gt;&amp;#60;!DOCTYPE html&amp;#62;&lt;/code&gt;&lt;br /&gt;
    &lt;code&gt;&amp;#60;html lang='en'&amp;#62;&lt;/code&gt;&lt;br /&gt;
    &lt;code&gt;&amp;#60;meta charset='UTF-8'&amp;#62;&lt;/code&gt;&lt;br /&gt;
      &lt;code&gt;&amp;#60;head&amp;#62;&lt;/code&gt;&lt;br /&gt;
      &lt;code&gt;&amp;#60;tite&amp;#62;&lt;/code&gt;...&lt;code&gt;&amp;#60;/title&amp;#62;&lt;/code&gt;&lt;br /&gt;
      &lt;code&gt;&amp;#60;meta name="viewport" content="initial-scale:1.0" width="device-width"/&amp;#62;&lt;/code&gt;&lt;br /&gt;
      &lt;code&gt;&amp;#60;/head&amp;#62;&lt;/code&gt;

    &lt;p&gt;Once you have completed inserting that into your &lt;code&gt;&amp;#60;head&amp;#62;&lt;/code&gt;, you need to open up your CSS Stylesheet. The important thing at this point is to understand the difference between &lt;code&gt;@media (min-width: )&lt;/code&gt; and  &lt;code&gt;@media (max-width: )&lt;/code&gt; in relation to varying screen sizes between mobile, tablet, and desktop.&lt;/p&gt;

    &lt;p&gt;It should be noted that when using &lt;code&gt;@media (min-width: )&lt;/code&gt;, you are referring to any pixel size &lt;em&gt;above&lt;/em&gt; that threshold set in pixels, where as &lt;code&gt;@media (max-width: )&lt;/code&gt; refers to anything &lt;em&gt;below&lt;/em&gt; that threshold. It is also recommended that you insert your media queries into your CSS sheet as opposed to doing it in your HTML, as this leads to cleaner, more readable code that it easy to understand.&lt;/p&gt;

    &lt;p&gt;To determine what your threshold should be, a good place to start might be referencing some common device screen sizes, such as 360 px (mobile), 768 px (tablet), and 1200px (desktop). However, it’s always best to resize your browser to see what happens because the rearrangement of any type of content on the page (i.e. images, text, colors, boxes) between those sizes can potentially look incorrect or rearrange themselves in an unexpected manner that you didn’t intend upon. It should also be noted that &lt;code&gt;em/rem&lt;/code&gt; is usually reserved for typography sizes, whereas percentages are best applied to your website’s grid and layout.&lt;/p&gt;

    &lt;img src="/images/rwd.png" class="image" /&gt;
  &lt;/main&gt;
</content>
  </entry>
  <entry>
    <title>Explain mobile first design</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/10/01/post6.html"/>
    <id>http://blog.url.com/gina-blog/2018/10/01/post6.html</id>
    <published>2018-09-30T19:00:00-05:00</published>
    <updated>2018-11-05T14:05:45-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main class="blogposts__container"&gt;
    &lt;header&gt;
        &lt;h1&gt;Explain mobile first design AND mobile first development. Why does it matter? How do you do it?&lt;/h1&gt;
        &lt;time datetime="2018-11-21"&gt;OCTOBER 1, 2018&lt;/time&gt;
    &lt;/header&gt;
        &lt;p&gt;Both mobile first design and mobile first development focus on one aspect of responsive web design, which is the act of designing for mobile first before considering the other screen sizes like tablet and desktop. Both mobile first design and mobile first development seek to reduce any extraneous content that is not essential to users under the circumstances that they might be accessing a website or app through their phone (i.e. while driving, commuting, traveling abroad).&lt;/p&gt;

        &lt;p&gt;However, mobile first design differs in that it focuses more on the visual aspects of layout design and arrangement of only the most essential content while only /considering in mind/ the limitations of code.&lt;/p&gt;

        &lt;p&gt;Mobile first development, on the other hand, actually translates that visual layout design into code, reflects the limitations of code that can be experienced in real-time, and incorporates the use of CSS media queries that reflect how the viewport resizes and rearranges itself starting from mobile to desktop.&lt;/p&gt;

        &lt;p&gt;Ultimately, one does not take more importance over the other, as both share the same goal through different but overlapping means of achieving it. Although pursuing mobile first ultimately leads to responsive web design, the choice and focus largely depends on the product’s traffic. If users are accessing your product through desktop more than they are through mobile, then responsive web design is the way to go. However, if they are accessing the product through mobile more than desktop, then mobile first development would be a wiser choice.&lt;/p&gt;

        &lt;p&gt;Both mobile first design and development play an important role for users because in today’s world, mobile usage is continuously increasing. As reflected through Statista:&lt;/p&gt;

        &lt;p&gt;According to January 2018 data, the global mobile population amounted to 3.7 billion unique users. As of February 2017, mobile devices accounted for 49.7 percent of web page views worldwide, with mobile-first markets such as Asia and Africa leading the pack.&lt;/p&gt;
&lt;/main&gt;
</content>
  </entry>
  <entry>
    <title>An Overview of Typographic History</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/09/26/post5.html"/>
    <id>http://blog.url.com/gina-blog/2018/09/26/post5.html</id>
    <published>2018-09-25T19:00:00-05:00</published>
    <updated>2018-11-05T14:05:45-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main class="blogposts__container"&gt;
  &lt;header&gt;
    &lt;h1&gt;An Overview of Typographic History,&lt;br /&gt; Classifications, and Characteristics&lt;/h1&gt;
    &lt;time datetime="2018-11-21"&gt;SEPTEMBER 26, 2018&lt;/time&gt;
  &lt;/header&gt;
  &lt;p class="typography-p"&gt;Typography is one of the most overlooked but essential forms for communication, readability,
    legibility, and
    accessibility. It is an especially useful tool for graphic designers, visual designers, UI/UX designers, and web
    designers, all of whom create, design, and produce something that plays into a user"s experience or interaction
    with a product. There are six possible categories that typefaces can fall into: blackletter, serif, sans serif,
    modern, slab serif and display. Here’s the low-down:&lt;/p&gt;

  &lt;section class="helper-space-top"&gt;
    &lt;div class="column"&gt;
      &lt;h2 class="typography-h2"&gt;Blackletter (1450)
        &lt;hr /&gt;
      &lt;/h2&gt;
      &lt;p class="typography-p"&gt;Otherwise known as &lt;em&gt;Gothic&lt;/em&gt;, &lt;em&gt;Fraktur&lt;/em&gt;, or &lt;em&gt;Old English&lt;/em&gt; is the
        script of the Middle
        Ages. It was used in the Gutenburg Bible, one of the first books printed in Europe. These typefaces were used
        in early manuscript writing and are characterized by their dramatic thin and thick strokes. Sometimes in other
        forms they will include elaborate swirls in the serifs.&lt;/p&gt;

      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt;Primarily seen and used in early manuscript writing&lt;/li&gt;
        &lt;li&gt;Characterized by dramatic thin and thick strokes&lt;/li&gt;
        &lt;li&gt;Weight is very heavy and dark&lt;/li&gt;
        &lt;li&gt;Almost illegible to the modern eyes&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;section class="helper-space-top"&gt;
    &lt;div class="column"&gt;
      &lt;h2 class="typography-h2"&gt;Serif
        &lt;hr /&gt;
      &lt;/h2&gt;
      &lt;h3&gt;Humanist (1460s – 1470s)&lt;/h3&gt;
      &lt;p class="typography-p"&gt;Sometimes people refer to &lt;em&gt; Humanist &lt;/em&gt; typefaces as &lt;em&gt;Venetian&lt;/em&gt; and have
        strong roots in
        calligraphy modeled on the lighter, more open forms of the Italian humanist writers. The Humanist types were at
        the same time the first roman types. Often derived largely from Roman inscriptions and early serif typefaces,
        Humanist typefaces usually feature the lowercase two-story “a” and “g,” both of which combined makes this
        typeface more legible.&lt;/p&gt;
      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt;Notably calligraphic&lt;/li&gt;
        &lt;li&gt;Sloping cross-bar on the lowercase “e”&lt;/li&gt;
        &lt;li&gt;Usually feature lowercase two-story "a" and "g"&lt;/li&gt;
        &lt;li&gt;Relatively small x-height&lt;/li&gt;
        &lt;li&gt;Low contrast between “thick” and “thin” strokes; little variation in the stroke width&lt;/li&gt;
        &lt;li&gt;Dark visual tone (view the page with half-closed eyes)&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;section class="helper-space-top"&gt;
    &lt;hr /&gt;
    &lt;div class="column"&gt;
      &lt;h3&gt;Old-Style (Late 14th – Mid 18th Century)&lt;/h3&gt;
      &lt;p class="typography-p"&gt;Old Style typefaces are sometimes referred to as &lt;em&gt;Garalde&lt;/em&gt; typefaces, as they were
        developed in the
        late 14th century by Renaissance typographers. In 1401, they birthed the first italic typeface. as they
        demonstrate a greater refinement—to a large extent augmented by the steadily improving skills of punchcutters.&lt;/p&gt;
      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt; Greater contrast between thick and thin strokes&lt;/li&gt;
        &lt;li&gt; Sharper in appearance, more refined&lt;/li&gt;
        &lt;li&gt; Serifs on the ascenders are more wedge shaped&lt;/li&gt;
        &lt;li&gt; Lowercase “e” has a horizontal cross bar&lt;/li&gt;
        &lt;li&gt; More upright stress&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;section class="helper-space-top"&gt;
    &lt;hr /&gt;
    &lt;div class="column"&gt;
      &lt;h3&gt;Transitional (1716 – 1728)&lt;/h3&gt;
      &lt;p class="typography-p"&gt;Transitional typefaces are something referred to as &lt;em&gt;Neoclassical&lt;/em&gt; or &lt;em&gt;Realist&lt;/em&gt;.
        This type was
        introduced by John Baskerville and Pierre Fournier. Baskerville happened to take an interest in printing,
        eventually designing his own type in order to improve upon Caslon’s work. Fournier is remembered today for
        introducing the point system as a way to measure typefaces.&lt;/p&gt;

      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt;Vertical or almost vertical stress in the bowls of lowercase letters: &lt;em&gt; b, c, d, e, g, o, p, q&lt;/em&gt;&lt;/li&gt;
        &lt;li&gt; Greater contrast between thick and thin (sub-) strokes&lt;/li&gt;
        &lt;li&gt;Ascenders are generally more horizontal&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/section&gt;


  &lt;section class="helper-space-top"&gt;
    &lt;div class="column"&gt;
      &lt;h2 class="typography-h2"&gt;Modern or Didone (Late 18th Century)
        &lt;hr /&gt;
      &lt;/h2&gt;

      &lt;p class="typography-p"&gt;Modern typefaces were largely influenced by competitive rivals, Firmin Didot of the Didot
        family’s small
        printing dynasty in France and Giambamtista Bodoni, both of which pushed the limits of type design. Although
        they are always a poor choice for large chunks of text, they are best choices for display type and large sizes
        like titles, which emphasize the elegance of each individual character.&lt;/p&gt;

      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt;High and abrupt contrast between thick and thin strokes&lt;/li&gt;
        &lt;li&gt;Abrupt (unbracketed) hairline (thin) serifs&lt;/li&gt;
        &lt;li&gt;Vertical axis&lt;/li&gt;
        &lt;li&gt;Horizontal stress&lt;/li&gt;
        &lt;li&gt;Small aperture&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;section class="helper-space-top"&gt;
    &lt;div class="column"&gt;
      &lt;h2 class="typography-h2"&gt;Slab Serif or Egyptian (Early 18th Century)
        &lt;hr /&gt;
      &lt;/h2&gt;

      &lt;p class="typography-p"&gt;Slab serifs, otherwise known as &lt;em&gt;Egyptians&lt;/em&gt; were originally created for
        advertising, posters, and other
        large media. They can alternatively be called &lt;em&gt;Mechanicals.&lt;/em&gt;These were the first types designed as
        display type. Vincent Figgins is credited with the first slab serifs, as the earliest specimens were in 1815.
        Slab serif typefaces typically feature abrupt serifs and are usually heavier weights.&lt;/p&gt;

      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt;Heavy weight&lt;/li&gt;
        &lt;li&gt;Low stroke contrast between thin and thick&lt;/li&gt;
        &lt;li&gt;Unbracketed, prominent serifs&lt;/li&gt;
        &lt;li&gt;First typefaces created expressly for display purposes&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;section class="helper-space-top"&gt;
    &lt;div class="column"&gt;
      &lt;h2 class="typography-h2"&gt;Sans Serif
        &lt;hr /&gt;
      &lt;/h2&gt;
      &lt;h3&gt;Geometric&lt;/h3&gt;
      &lt;p class="typography-p"&gt;Geometric typefaces are the &lt;strong&gt;least legible/readable&lt;/strong&gt; of all the sans serif
        typefaces,
        especially for body copy. Geometric typefaces are recommended to be set in short, larger type as opposed to
        longer content like body copy. This type is often described as cold and clinical, yet simple.&lt;/p&gt;

      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt; The least legible of all the typefaces, especially for body text&lt;/li&gt;
        &lt;li&gt; Based on geometric shapes, near perfect circles and squares&lt;/li&gt;
        &lt;li&gt; Modern look and feel&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;section class="helper-space-top"&gt;
    &lt;hr /&gt;
    &lt;div class="column"&gt;
      &lt;h3&gt;Humanist (20th Century)&lt;/h3&gt;

      &lt;p class="typography-p"&gt;Humanist typefaces are said to be the &lt;strong&gt;most legible/readable&lt;/strong&gt; of all the
        sans serif typefaces.
        Like it’s serif counterpart, the Humanist sans serif also shares the calligraphic influence, basing its strokes
        and shapes on forms that originate from the pen or brush. Their proportions are often derived from Roman
        inscriptions and early serif typefaces. The lowercase “a” and “g” are most often two-story, which makes them a
        more legible choice than other sans faces.&lt;/p&gt;

      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt; The most calligraphic&lt;/li&gt;
        &lt;li&gt; Legible/readable of the typefaces&lt;/li&gt;
        &lt;li&gt; Some variation in line width&lt;/li&gt;
        &lt;li&gt; Greater variation in stroke width&lt;/li&gt;
        &lt;li&gt; Character by the presence of gentler, more natural curves&lt;/li&gt;
      &lt;/ul&gt;

    &lt;/div&gt;
  &lt;/section&gt;

  &lt;section class="helper-space-top"&gt;
    &lt;hr /&gt;
    &lt;div class="column"&gt;
      &lt;h3&gt;Grotesque or Grotesk (19th – Early 20th Century)&lt;/h3&gt;

      &lt;p class="typography-p"&gt;Grotesques have a tendency to feature awkward weigh distribution around bowls of
        characters and irregular
        curves. They usually feature an awkward “a” and “g” with squarish bowls, odd curves and angles sat the tips of
        strokes in the “J” and “S” and overall irregularity.&lt;/p&gt;

      &lt;h3 class="helper-space-bottom"&gt;&lt;strong&gt;What makes me special:&lt;/strong&gt;&lt;/h3&gt;
      &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt; Spurred “G”, as well as squarish bowls of lowercase “a” and “g”&lt;/li&gt;
        &lt;li&gt; Obvious stoke contrast, tending to display some variation in thickness of strokes but no calligraphic
          influence of logical pattern&lt;/li&gt;
        &lt;li&gt; Proportional idiosyncrasies&lt;/li&gt;
        &lt;li&gt; Tall x-height with a vertical axis&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/section&gt;
&lt;/main&gt;
</content>
  </entry>
</feed>
