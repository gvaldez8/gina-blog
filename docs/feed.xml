<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2018-11-11T18:00:00-06:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>UX Design Process&amp;#58; The Early Stages of Discovery</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/11/12/post11.html"/>
    <id>http://blog.url.com/gina-blog/2018/11/12/post11.html</id>
    <published>2018-11-11T18:00:00-06:00</published>
    <updated>2018-11-12T20:55:04-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main class="blogposts__container"&gt;
  &lt;header class="header-main"&gt;
    &lt;h1&gt;UX Design Process: &lt;br /&gt; The Early Stages of Discovery&lt;/h1&gt;
    &lt;time datetime="2018-11-12"&gt;November 12, 2018&lt;/time&gt;
  &lt;/header&gt;
  &lt;p&gt;The most common way that people refer to the UX Design Process is through using the &lt;em&gt;Double Diamond Design
      Process&lt;/em&gt;. It looks like this:&lt;/p&gt;

  &lt;img src="/images/Double_Diamond_Design_Process.png" height="95%" width="95%" /&gt;

  &lt;p&gt;Here’s some further explanation on how this works, some of which are from &lt;em&gt;The User Experience Team of One&lt;/em&gt;
    by Leah Buley.&lt;/p&gt;


  &lt;h2&gt;Discover&lt;/h2&gt;
  &lt;hr /&gt;
  &lt;p&gt;This is the most important phase, as it’s the kick-off to any project that you start and will determine the tone
    for the entire process from start to finish. This phase requires extensive planning and research. This process can
    be broken up into the following segments: The Research Plan, Methods for Research, Conducting the User
    Research,Synthesizing your Findings, Defining the Problem, and Determining the Solution that will define your
    next steps and deliverables.&lt;/p&gt;


  &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;RESEARCH PLAN&lt;/strong&gt;&lt;/h5&gt;
  &lt;hr /&gt;
  &lt;p&gt;Note that this is different than a &lt;strong&gt;Project Plan&lt;/strong&gt;, which lays out a general overview of the project
    timeline from start to finish usually done in weekly increments.

    The Research Plan just determines the methods that you will take to conduct any research, define how that research
    ties with business goals, and be aware of what resources are available to you (i.e. any research conducted by the
    company or business). Before you can conduct research, you need to define what you seek to learn or what you are
    interested in learning, as well as any assumptions you might have prior. It’s important to consider aligning with
    business goals. Here are the steps that you would take and consider:&lt;/p&gt;

  &lt;ol class="blogpost--ol-indent"&gt;
    &lt;li&gt;&lt;strong&gt;Define Research Goals —&lt;/strong&gt; This is similar to a Project Brief. Summarize your learning objectives
      into short statements. These goals need to speak to the business or behavioral change that you hope to create.&lt;/li&gt;

    &lt;li&gt;&lt;strong&gt;Brainstorm Research Methods&lt;/strong&gt;&lt;/li&gt;
    &lt;ul class="blogpost--ul-indent"&gt;
      &lt;li&gt;What kind of research will you conduct? (See next section)&lt;/li&gt;
      &lt;li&gt;What tools will you use to conduct your research?&lt;/li&gt;
      &lt;li&gt;Contextual Inquiry&lt;/li&gt;
      &lt;li&gt;Competitive Analysis&lt;/li&gt;
      &lt;li&gt;Market Research&lt;/li&gt;
      &lt;li&gt;Usability Testing&lt;/li&gt;
      &lt;li&gt;User Flows&lt;/li&gt;
    &lt;/ul&gt;

    &lt;li&gt;&lt;strong&gt;Determine who you will interview —&lt;/strong&gt; What kind of users will you select to interview? How many?
      Which individuals? Think in terms of roles if you don't have names. Aim to speak with a cross-functional team so
      that you can see the overall project or
      product from different angles.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Start backwards — &lt;/strong&gt;For example, if the goal is to produce more sales on a landing page, you
      need
      to understand users’ perception
      of the landing page, why they’re going there, and in what ways the site does and doesn’t currently meet their
      needs.&lt;/li&gt;


    &lt;li&gt;&lt;strong&gt;Define the Duration —&lt;/strong&gt; Estimate a timeframe of how long you think that each activity will
      take. So, for example, user interviews should take at least 1–2hrs on average.&lt;/li&gt;

    &lt;li&gt;&lt;strong&gt;Define the Overall Timeline (The Project Plan) — &lt;/strong&gt;
      This is just taking note of any key milestones related to the project or firm deadlines that you need to be
      conscious of. Determining this step helps you manage your time, reduce, and change accordingly. You can also
      visualize this with existing tools and platforms, such as Gantt Chart or Monday.com&lt;/li&gt;

  &lt;/ol&gt;

  &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;RESEARCH METHODS&lt;/strong&gt;&lt;/h5&gt;
  &lt;hr /&gt;
  &lt;p&gt;These are the methods that you will consider when putting together your Research Plan. There are three
    different types of research that you could conduct:&lt;/p&gt;
  &lt;ol class="blogpost--ol-indent"&gt;
    &lt;li&gt;&lt;strong&gt;Primary Research — &lt;/strong&gt;These are learnings from users firsthand, such as:&lt;/li&gt;
    &lt;ul class="blogpost--ul-indent"&gt;
      &lt;li&gt;Field research&lt;/li&gt;
      &lt;li&gt;Guerrilla research&lt;/li&gt;
      &lt;li&gt;Diary studies&lt;/li&gt;
      &lt;li&gt;User research and user interviews&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Focus groups —&lt;/strong&gt; Moderated discussion with a group of users, allow you to learn about user
        attitudes, ideas, and desires.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Task Analysis —&lt;/strong&gt; Involves learning about user goals, including what users want to do on your
        website, and helps you understand the tasks
        that users will perform on your site.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Card sorting —&lt;/strong&gt; Allows users to group your site’s information. This helps
        ensure that the site structure matches the way users think.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Surveys —&lt;/strong&gt; This isn’t always the most helpful just because users have the tendency to use
        surveys as
        opportunities to rant. Consider this method as a last resort if there is absolutely little to no time to
        conduct
        proper, thorough research.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;&lt;strong&gt;Secondary Research — &lt;/strong&gt; These are collected third-party research conducted into the
      user population, such as:&lt;/li&gt;
    &lt;ul class="blogpost--ul-indent"&gt;
      &lt;li&gt;Publicly available research&lt;/li&gt;
      &lt;li&gt;Internal research conducted from other parts of the organization (i.e. marketing segmentation). Note that
        this will be
        amongst the most useful to UX Professionals, so this would be a great start.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;li&gt;&lt;strong&gt;Personas, Mental Models, and User Stories — &lt;/strong&gt; These are documents that synthesize what you’ve
      learned about users after going through the aforementioned methods all distilled into digestible key points, such
      as:&lt;/li&gt;
    &lt;ul class="blogpost--ul-indent"&gt;
      &lt;li&gt;Supporting diagrams (i.e. contextual inquiry, competitor analysis, product assessment)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Usability Testing —&lt;/strong&gt; Identifies user frustrations and problems with your site through
        one-on-one sessions where a
        "real-life" user performs tasks on your site.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;User flows —&lt;/strong&gt; The step-by-step path taken by a user on a website or app to successfully
        complete a task or final action, such as purchasing an item.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Personas —&lt;/strong&gt; The creation of a representative user based on available data and user
        interviews. Though the personal details of the persona may be fictional, the information used to create the
        user type isn't because it uses actual information based on user interviews. Sometimes referred to
        as a "proto-persona", these are intended to tell a story of how a
        product fits into users' lives.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;User Scenarios —&lt;/strong&gt; Provide a description of how users use a particular feature of your
        website. They provide a detailed look
        at how users interact with the site, including the steps users take to accomplish each task.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Prototyping —&lt;/strong&gt; Allows the design team to explore ideas before implementing them by creating a
        mock-up of the site. A
        prototype can range from a paper mock-up to interactive html pages.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/ol&gt;

  &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;THE ART OF CONDUCTING USER INTERVIEWS&lt;/strong&gt;&lt;/h5&gt;
  &lt;hr /&gt;
  &lt;p&gt;Refer to your &lt;strong&gt;Research Plan&lt;/strong&gt; for the groups of users that you will interview and tailor your
    questions accordingly. Each interview should take on average anywhere from 1–2hrs and no shorter than 30mins
    at minimum. You can generally think of the type of users that you will interview and how that will influence your
    questions by classifying them into these two groups:&lt;/p&gt;
  &lt;ol class="blogpost--ol-indent"&gt;
    &lt;li&gt;Interviewing &lt;strong&gt;existing customers&lt;/strong&gt; to understand what’s good and bad about the product.&lt;/li&gt;

    &lt;li&gt;Interviewing &lt;strong&gt;target customers&lt;/strong&gt; about how they balance work/life today, pain points, tools they
      use today, etc.&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;Before you actually conduct the interviews, you want to do some prep work to ensure that your interview runs
    smoothly. The first thing that you should do, is write things down.&lt;/p&gt;

  &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;PREP WORK: USER INTERVIEW QUESTIONS&lt;/strong&gt;&lt;/h5&gt;
  &lt;hr /&gt;
  &lt;p&gt;Start with an introduction that defines who you are, what this project is for, assure the user’s honest, open
    feedback is valuable and make the user feel comfortable by making small talk before starting. You should also note
    how everything that is said is confidential and is strictly being used for research purposes before recording your
    interview.Then start writing down questions that you have. Of course, these questions will be tailored according to
    your
    product and your users, but here are some great ones to start:&lt;/p&gt;
  &lt;ul class="blogpost--ul-indent"&gt;
    &lt;li&gt;What’s your role in the organization and how does it relate to the product?&lt;/li&gt;
    &lt;li&gt;What are your goals and objectives in your role? What are your top priorities? How do you know if you’re
      successful? How do you measure success?&lt;/li&gt;
    &lt;li&gt;How does your work impact customers? Who do you consider to be your primary customers? Can you describe them?
      What
      are their priorities and goals? Why do they use your products? What prevents them from using your products, if
      anything? What questions do you have about your users that you don’t currently have answers to?&lt;/li&gt;
    &lt;li&gt;Who are your competitors, and how well are you doing compared to them? What do you do well? What could be
      improved?
      What differentiates your company and your products in the market?&lt;/li&gt;
    &lt;li&gt;[If there’s a specific project underway that you’re involved in…] What are your goals for this project? What is
      your vision for how this project will improve our product? Do you see any risks or red flags?&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;Here are some additional examples using &lt;a href="https://projects.iq.harvard.edu/files/harvarduxgroup/files/ux-research-guide-sample-questions-for-user-interviews.pdf"&gt;Sarah
      Doody's Starter Questions for User Research.&lt;/a&gt; What's nice about her guide is that she separates questions into
    situational categories, so, for example: customer intro, topic specific, product opportunity, and
    product reaction questions, all of which you should always follow with "why" and "why not" to dig deeper.&lt;/p&gt;

  &lt;h2&gt;Define&lt;/h2&gt;
  &lt;hr /&gt;
  &lt;p&gt;Once you have conducted all of your interviews, review your recordings, take notes of all the answers, and start
    searching for big themes. You can start synthesizing your research by doing some affinity mapping. Here are some
    general things that you should to pay attention to while you’re undergoing that process:&lt;/p&gt;
  &lt;ul class="blogpost--ul-indent"&gt;
    &lt;li&gt;Expectations that users have regarding the user experience&lt;/li&gt;
    &lt;li&gt;Separate assumptions from working knowledge. What is absolutely true, what are hunches, and what gaps are there
      in
      your knowledge?&lt;/li&gt;
    &lt;li&gt;Problems or concerns with existing product&lt;/li&gt;
    &lt;li&gt;Past things that have already been done but didn’t work well and why.&lt;/li&gt;
    &lt;li&gt;Any follow-up questions that users might have that you could inform them about at a later date&lt;/li&gt;
    &lt;li&gt;Who wants to actively be involved with the UX and in what ways?&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;SYTHESIZE&lt;/strong&gt;&lt;/h5&gt;
  &lt;hr /&gt;
  &lt;p&gt;At this stage, you will be taking the insights you found from your user interviews and converting them into
    keyfindings that are easier to digest. Consider this a list of takeaways from your user interviews. For example,
    who you interviewed, which groups said what, and how many people feel the same way (i.e. 4/5 users felt this).&lt;/p&gt;

  &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;DEVELOP A PROBLEM STATEMENT&lt;/strong&gt;&lt;/h5&gt;
  &lt;hr /&gt;
  &lt;p&gt;First of all, what is a problem statement? A &lt;strong&gt;problem statement&lt;/strong&gt; is basically a very concise,
    description of the issue that you're going to address, improve upon, or solve for. Below is the structure
    that it
    usually follows:&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;[USERS]&lt;/strong&gt; needs a way to &lt;strong&gt;[GOAL/ACTION]&lt;/strong&gt; because &lt;strong&gt;[SURPRISING INSIGHT].&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;OR&lt;/p&gt;

  &lt;p&gt;A &lt;strong&gt;[USER ROLE]&lt;/strong&gt; feels &lt;strong&gt;[NEGATIVE FEELING]&lt;/strong&gt; about &lt;strong&gt;[REASON]&lt;/strong&gt; needs to
    &lt;strong&gt;[STEP]&lt;/strong&gt; but faces &lt;strong&gt;[OBSTACLE].&lt;/strong&gt;&lt;/p&gt;


  &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;DEFINE THE SOLUTION&lt;/strong&gt;&lt;/h5&gt;
  &lt;hr /&gt;
  &lt;p&gt;Similar to a problem statement, a solution statement is a concise description of how you intend to solve your
    users' problems according to the research you collected. Solution statements can also be referred to as &lt;strong&gt;How
      Might We… (HMW)&lt;/strong&gt; statements. HMW statements summarize how we could help solve our
    users’
    problems, improve upon their experience with the product or service, or change their feelings and perception of the
    product. Below are some tips that can help you generate successful HMW statements that stay within scope by
    starting from a general place:&lt;/p&gt;
  &lt;ol class="blogpost--ol-indent"&gt;
    &lt;li&gt;&lt;strong&gt;Amp up the Good&lt;/strong&gt;&lt;/li&gt;
    &lt;ul class="blogpost--ul-indent"&gt;
      &lt;li&gt;HMW help &lt;strong&gt;[USER]&lt;/strong&gt; accomplish &lt;strong&gt;[GOAL or ACTION]&lt;/strong&gt;?&lt;/li&gt;
      &lt;li&gt;HMW make &lt;strong&gt;[SOLUTION]&lt;/strong&gt; the best &lt;strong&gt;[TYPE OF EXPERIENCE]&lt;/strong&gt;?&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;&lt;strong&gt;Focus on Emotions&lt;/strong&gt;&lt;/li&gt;
    &lt;ul class="blogpost--ul-indent"&gt;
      &lt;li&gt;HMW help &lt;strong&gt;[USER]&lt;/strong&gt; accomplish &lt;strong&gt;[GOAL or ACTION]&lt;/strong&gt;?&lt;/li&gt;
      &lt;li&gt;HMW design &lt;strong&gt;[SOLUTION]&lt;/strong&gt; to help users with &lt;strong&gt;[NEED]&lt;/strong&gt;?&lt;/li&gt;
      &lt;li&gt;HMW make the user experience?&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;&lt;strong&gt;Take it to an Extreme&lt;/strong&gt;&lt;/li&gt;
    &lt;ul class="blogpost--ul-indent"&gt;
      &lt;li&gt;HMW make &lt;strong&gt;[IDEAL SOLUTION or EXPERIENCE]&lt;/strong&gt;?&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;&lt;strong&gt;Explore the Opposite&lt;/strong&gt;&lt;/li&gt;
    &lt;ul class="blogpost--ul-indent"&gt;
      &lt;li&gt;HMW make &lt;strong&gt;[OPPOSITE OF SOLUTION]&lt;/strong&gt;?&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;&lt;strong&gt;Question an Assumption&lt;/strong&gt;&lt;/li&gt;
    &lt;ul class="blogpost--ul-indent"&gt;
      &lt;li&gt;HMW &lt;strong&gt;[ACTION]&lt;/strong&gt; the &lt;strong&gt;[ASSUMPTION]&lt;/strong&gt;?&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;&lt;strong&gt;Create an Analogy from Insight or Context&lt;/strong&gt;&lt;/li&gt;
    &lt;ul class="blogpost--ul-indent"&gt;
      &lt;li&gt;HMW make &lt;strong&gt;[SOLUTION]&lt;/strong&gt; like a/an &lt;strong&gt;[ANALOGY]&lt;/strong&gt;?&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;&lt;strong&gt;Focus in on an Element&lt;/strong&gt;&lt;/li&gt;
    &lt;ul class="blogpost--ul-indent"&gt;
      &lt;li&gt;HMW amplify the &lt;strong&gt;[POSITIVE or NEGATIVE EXPERIENCE]&lt;/strong&gt; related to &lt;strong&gt;[USERS' NEED]&lt;/strong&gt;?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/ol&gt;

  &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;SOURCES&lt;/strong&gt;&lt;/h5&gt;
  &lt;hr /&gt;
  &lt;ul class="blogpost--ul-indent"&gt;
    &lt;li&gt;&lt;a href="http://www.dorotaux.com/process/"&gt;Process — Dorota Kacejko&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://projects.iq.harvard.edu/files/harvarduxgroup/files/ux-research-guide-sample-questions-for-user-interviews.pdf"&gt;Harvard's
        UX Research Guide Sample Questions for User Interviews from Sarah Doody&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="(https://medium.com/eightshapes-llc/how-to-build-a-problem-statement-d1f21713720b"&gt;How to Build a
        Problem Statement – EightShapes – Medium&lt;/a&gt;&lt;/li&gt;

    &lt;li&gt;&lt;a href="http://www.designkit.org/methods/3"&gt;IDEO's Design Kit&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://dschool.stanford.edu/resources/how-might-we-questions"&gt;Stanford Design School's Resource to
        How Might We
        Questions&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://www.usability.gov/what-and-why/user-research.html"&gt;The Usability.gov Guide to User
        Research
        Basics&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2 class="helper-space-top"&gt;How to Create User Interview Questions&lt;/h2&gt;
  &lt;hr /&gt;
  &lt;p&gt;Let's start with a fictional but realistic scenario based off an existing problem in the world.

    &lt;blockquote&gt;Finding the ideal roommate in a new city is not an easy feat. On top of the whole moving process and
      the lifestyle adjustments that
      come with moving to a new environment, there are so many things to consider from budget to living habits to
      preferred transporation methods. How would you design an app that helps a newcomer from an entirely different
      city
      find the ideal roomate?&lt;/blockquote&gt;
  &lt;/p&gt;
&lt;/main&gt;
</content>
  </entry>
  <entry>
    <title>UX Case Study&amp;#58; The Path to Mastery</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/11/08/post10.html"/>
    <id>http://blog.url.com/gina-blog/2018/11/08/post10.html</id>
    <published>2018-11-07T18:00:00-06:00</published>
    <updated>2018-11-12T17:30:16-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main class="blogposts__container"&gt;
  &lt;header class="header-main"&gt;
    &lt;h1&gt;User Experience (UX) Case Study:&lt;br /&gt; The Path to Mastery&lt;/h1&gt;
    &lt;time datetime="2018-11-08"&gt;November 8, 2018&lt;/time&gt;
  &lt;/header&gt;
  &lt;p&gt;8th Light is a consulting firm specializing in custom software development. The company is most well-known for
    delivering quality software development professionals and its Apprenticeship Program, where they teach and train
    aspiring software development professionals from various technical backgrounds. Established back in 2006, the
    apprenticeship curriculum has undergone numerous trial and errors, as well as constant revisions with little
    documentation on how the overall quality of the learning experience and the program have improved.&lt;/p&gt;

  &lt;p&gt;Given its long history of evolution, my colleague and I were approached by a determined stakeholder who shared his
    own understanding of the problem: the apprenticeship curriculum currently exists as tribal knowledge, which
    resulting in inconsistent standards and anxiety amongst apprentices. Undergoing the user experience design process,
    my colleague and I dedicated two weeks to assess our stakeholder's theory, define the problem, and come up with an
    appropriate solution. Here's what the process:&lt;/p&gt;

  &lt;section&gt;
    &lt;h4&gt;&lt;strong&gt;MY ROLE&lt;/strong&gt;&lt;/h4&gt;
    &lt;hr /&gt;
    &lt;p&gt;On this team of two, I served a mixture of primary and supplementary roles:&lt;/p&gt;
    &lt;ul class="blogpost--ul"&gt;
      &lt;li&gt;Note-taker during user interviews and documented user interview answers in a spreadsheet&lt;/li&gt;

      &lt;li&gt;Contributed to strategy, affinity mapping, and synthesizing research.&lt;/li&gt;

      &lt;li&gt;Helped to develop problem statements and How Might We... Statements&lt;/li&gt;

      &lt;li&gt;Designed and pitched the final presentation to our stakeholder.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/section&gt;

  &lt;section class="helper-space-top-small"&gt;
    &lt;div class="blogpost__number-circle"&gt;
      &lt;span class="blogpost__number-dot"&gt;1&lt;/span&gt;
      &lt;h4 class="helper-space-left"&gt;&lt;strong&gt;THE RESEARCH PLAN&lt;/strong&gt;&lt;/h4&gt;
    &lt;/div&gt;
    &lt;hr /&gt;

    &lt;h4&gt;User Interviews&lt;/h4&gt;

    &lt;h4&gt;Problem Statements&lt;/h4&gt;
    &lt;h4&gt;Hypothesis&lt;/h4&gt;


    &lt;h4&gt;Method&lt;/h4&gt;
  &lt;/section&gt;

  &lt;section class="helper-space-top-small"&gt;
    &lt;div class="blogpost__number-circle"&gt;
      &lt;span class="blogpost__number-dot"&gt;2&lt;/span&gt;
      &lt;h4 class="helper-space-left"&gt;&lt;strong&gt;THE PROBLEM&lt;/strong&gt;&lt;/h4&gt;
    &lt;/div&gt;
    &lt;hr /&gt;

    &lt;p&gt;&lt;strong&gt;[Apprentices]&lt;/strong&gt; feel [frustration] about unclear expectations. They want to define those
      expectations but face
      [reluctance to speak up or reach out].&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;[Mentors]&lt;/strong&gt; feel [uncertainty] about understanding success metrics. They need [to document and
      share how they use
      the
      curriculum] but lack the structure to do so.&lt;/p&gt;
  &lt;/section&gt;

  &lt;section class="helper-space-top-small"&gt;
    &lt;div class="blogpost__number-circle"&gt;
      &lt;span class="blogpost__number-dot"&gt;3&lt;/span&gt;
      &lt;h4 class="helper-space-left"&gt;&lt;strong&gt;THE SOLUTION&lt;/strong&gt;&lt;/h4&gt;
    &lt;/div&gt;
    &lt;hr /&gt;
    Our solution is an unlinked extension of the 8th Light website, similar to our style guide.
  &lt;/section&gt;
&lt;/main&gt;
</content>
  </entry>
  <entry>
    <title>An Explanation of Sass and How it Works</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/10/16/post9.html"/>
    <id>http://blog.url.com/gina-blog/2018/10/16/post9.html</id>
    <published>2018-10-15T19:00:00-05:00</published>
    <updated>2018-11-08T10:08:48-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main class="blogposts__container"&gt;
  &lt;header class="header-main"&gt;
    &lt;h1&gt;An Explanation of Sass and How it Works&lt;/h1&gt;
    &lt;time datetime="2018-10-16"&gt;OCTOBER 16, 2018&lt;/time&gt;
  &lt;/header&gt;

  &lt;p&gt;Let's get one thing straight. Although they are often confused because of their similarities, SCSS and Sass are
    &lt;strong&gt;not the same.&lt;/strong&gt; SCSS stands for &lt;em&gt;Syntactically Awesome Stylesheets&lt;/em&gt;, otherwise known as Sassy
    CSS for short. Although Sass and SCSS are similar in that they briefly give an overview of CSS Preprocessing, they
    have different technical syntaxes.&lt;/p&gt;

  &lt;p&gt;SCSS followed the development of Sass, and since it’s an extension of CSS, every valid stylesheet is a valid SCSS
    file with the same meaning. It even understands most CSS vendor-specific syntaxes. It is in support of the idea of
    &lt;strong&gt;DRY&lt;/strong&gt; (don’t repeat yourself) code as opposed to &lt;strong&gt;WET&lt;/strong&gt; code (write every time). Here
    are the key differences between the two more in-depth:&lt;/p&gt;


  &lt;h2&gt;SASS&lt;/h2&gt;
  &lt;hr /&gt;
  &lt;ul class="blogpost--ul-columns"&gt;
    &lt;li&gt;SASS is a program written in Ruby—the technology or programming language that SASS is built on— that
      assembles
      CSS style sheets.&lt;/li&gt;
    &lt;li&gt;Uses indentation instead of brackets to indicate nesting of selectors&lt;/li&gt;
    &lt;li&gt;New lines rather than semicolons to separate properties&lt;/li&gt;
    &lt;li&gt;Employs language extensions (i.e. variables, nested rules, and mixins)&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2&gt;SCSS&lt;/h2&gt;
  &lt;hr /&gt;
  &lt;p&gt;Incorporates some commonly used features:&lt;/p&gt;
  &lt;ol class="blogpost--ol-columns"&gt;
    &lt;li&gt;Import&lt;/li&gt;
    &lt;li&gt;Variables&lt;/li&gt;
    &lt;li&gt;Nesting&lt;/li&gt;
    &lt;li&gt;Mixins&lt;/li&gt;
    &lt;li&gt;Operators&lt;/li&gt;
  &lt;/ol&gt;

  &lt;h2&gt;SCSS Features: In-Depth Explanations on How to Use Them&lt;/h2&gt;
  &lt;hr /&gt;
  &lt;p&gt;One of the major benefits of SCSS is that you can separate your code into more
    manageable, logical chunks. SCSS
    allows you the ability to separate your CSS according to different elements or components —buttons, lists,
    forms, colors, typography, etc.— to make them easier to work with and keep
    your stylesheets nice and &lt;strong&gt;DRY&lt;/strong&gt;. There are different file and folder structures that you can follow,
    such as &lt;a href="
      http://thesassway.com/beginner/how-to-structure-a-sass-project"&gt;The Sass Way&lt;/a&gt; or
    following &lt;a href="http://bradfrost.com/blog/post/atomic-web-design/"&gt;Brad
      Frost's Atomic
      Design&lt;/a&gt;.
  &lt;/p&gt;

  &lt;p&gt;
    &lt;a href="http://thesassway.com/beginner/how-to-structure-a-sass-project"&gt;The Sass Way&lt;/a&gt; of organizing a
    project would be by modules, partials, and anything related to vendors (third party CSS). &lt;strong&gt;Modules&lt;/strong&gt;
    would be
    anything like mixins, functions, and variables. &lt;strong&gt;Partials&lt;/strong&gt; would be things like the navigation,
    footer, buttons, typography, input fields, etc.
    Lastly, the &lt;strong&gt;vendor&lt;/strong&gt; directory would be dedicated to any third-party CSS like any prepackaged
    components, such as color pickers or JQuery UI.
  &lt;/p&gt;

  &lt;p class="helper-space-bottom"&gt;In terms of &lt;a href="http://bradfrost.com/blog/post/atomic-web-design/"&gt;Brad
      Frost's Atomic
      Design&lt;/a&gt;, although it's a great way to
    organize your
    elements or components, it should be noted that it creates additional complexity when it comes to using that
    methodology for organizing and developing your code. The reason behind that is because identifying and classifying atoms are
    straightforward, but determining
    which
    elements or components classify as molecules and
    organisms are where it could lead to one big, confusing, frustrating mess between you and your teammates.
    As
    far as achieving business goals with this method especially within large teams, the idea of having constant
    dicsusions to agree upon which is considered which is also quite draining and time
    consuming.&lt;/p&gt;
  &lt;hr /&gt;
  &lt;div class="column"&gt;
    &lt;h4&gt;&lt;strong&gt;@import&lt;/strong&gt;&lt;/h4&gt;
    &lt;p class="typography-p"&gt;Allows you to literally import styles from another stylesheet file into your current
      file, so you can separate your styles into logical files&lt;/p&gt;

    &lt;h4 class="helper-space-bottom"&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h4&gt;
    &lt;code class="helper-space-bottom"&gt;// inside main.scss&lt;br /&gt;
      @import 'typography.css';&lt;br /&gt;
      @import 'header.css';&lt;br /&gt;
      @import 'footer.css';&lt;br /&gt;
    &lt;/code&gt;
  &lt;/div&gt;

  &lt;hr /&gt;
  &lt;div class="column"&gt;
    &lt;h4 class="helper-space-bottom"&gt;&lt;strong&gt;$variables&lt;/strong&gt;&lt;/h4&gt;
    &lt;p class="typography-p"&gt;Defined with a &lt;code&gt;$&lt;/code&gt; symbol, are assigned a value, and allow for global
      changes to all of your files. For example, let’s say that a client or a project calls for a different color,
      it’s
      as simple as updating the variable value and it will be applied everywhere else that you’ve used it. The
      hardest
      part is naming your variable, as you can be as general or generic as you’d like.&lt;/p&gt;

    &lt;h4 class="helper-space-bottom"&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h4&gt;
    &lt;code&gt;// Colors&lt;br /&gt;
      $c-yellow: #fff03b;&lt;br /&gt;
      $c-yellow-dark: #ffe21d;&lt;/code&gt;&lt;br /&gt;

    &lt;code&gt;// Fonts&lt;br /&gt;
      $f-serif: 'Playfair Display', Georgia, Times, 'Times New Roman', serif;&lt;/code&gt;
  &lt;/div&gt;

  &lt;hr /&gt;
  &lt;h4&gt;&lt;strong&gt;Nesting&lt;/strong&gt;&lt;/h4&gt;
  &lt;p&gt;Allows for better organization of your styles and limits repetition. Although this is a great feature, the
    rule
    is
    to only nest 3 child selectors, as it will aid in preventing confusion from nesting too many elements&lt;/p&gt;

  &lt;hr /&gt;
  &lt;div class="column"&gt;
    &lt;h4&gt;&lt;strong&gt;@mixins&lt;/strong&gt;&lt;/h4&gt;
    &lt;p&gt; Allows you to define a reusable and configurable block of CSS. Mixins are made up of:&lt;/p&gt;
    &lt;ol class="blogpost--ol-indent"&gt;
      &lt;li&gt;The &lt;code&gt;@mixin&lt;/code&gt; directive, where you can also give them variables&lt;/li&gt;
      &lt;li class="typography-p"&gt;CSS Selectors&lt;/li&gt;
    &lt;/ol&gt;

    &lt;h4&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/h4&gt;&lt;br /&gt;
    &lt;code class="helper-space-top"&gt;@mixin background-opts ($pos: center, $size: cover, $rep: no-repeat, $color:
      $c-beige) {&lt;br /&gt;
      background-position: $pos;&lt;br /&gt;
      background-size: $size;&lt;br /&gt;
      background-repeat: $rep;&lt;br /&gt;
      background-color: $color;&lt;br /&gt;
      }&lt;/code&gt;
  &lt;/div&gt;

  &lt;hr /&gt;
  &lt;h4&gt;&lt;strong&gt;Operators:&lt;/strong&gt;&lt;/h4&gt;
  &lt;p&gt;Allows you to do math.&lt;/p&gt;
  &lt;code&gt;nav {
    height: $mobile-nav-height;
    @media (min-width:768px) {
    height: $mobile-nav-height \* 2;
    }
    }&lt;/code&gt;

  &lt;h2&gt;So, how do we Sass?&lt;/h2&gt;
  &lt;hr /&gt;
  &lt;ol class="blogpost--ol-indent"&gt;
    &lt;li&gt;Using Terminal in a new tab, ensure that you are in the right directory that &lt;strong&gt;contains&lt;/strong&gt;
      your stylesheets.&lt;/li&gt;
    &lt;li&gt;Type this in Terminal on the command line and hit "enter": &lt;code&gt;sass --watch nameofyourfile.scss:nameofyourfile.css&lt;/code&gt;
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: This command means that we are telling Terminal to "watch" for any changes that we make to
            our
            Sass file that we want
            reflected in CSS when it gets compiled. By "compiled" we mean rendered in a language our browsers understand.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;Using the &lt;code&gt;@import&lt;/code&gt; feature, ensure that your Sass files are connected to &lt;strong&gt;one and only one&lt;/strong&gt;
      stylesheet. It should like something like this below:
      &lt;script src="https://gist.github.com/gvaldez8/0fa5b0e035ce4635e94195da13ded580.js"&gt;&lt;/script&gt;&lt;/li&gt;
    &lt;li&gt;Once you have completed importing all of your Sass files to one base file, use the &lt;code&gt;@import&lt;/code&gt; feature again to attach that file to your main stylesheet that your site uses.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/main&gt;
</content>
  </entry>
  <entry>
    <title>An Introduction to Form Design</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/10/12/post8.html"/>
    <id>http://blog.url.com/gina-blog/2018/10/12/post8.html</id>
    <published>2018-10-11T19:00:00-05:00</published>
    <updated>2018-11-08T10:48:59-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main class="blogposts__container"&gt;
  &lt;header&gt;
    &lt;h1&gt;An Introduction to Form Design&lt;/h1&gt;
    &lt;time datetime="2018-10-12"&gt;OCTOBER 12, 2018&lt;/time&gt;
  &lt;/header&gt;

  &lt;p&gt;Let's start from the beginning. Although form design looks like it could be really simple and fun—it certainly is
    and it definitely can be—it is a lot more complex than it appears at face value. Form designs contain quite a few
    smaller elements that make up a larger component. With forms, you have elements like input fields, the placeholder
    text within those input fields, labels, dropdowns, radio buttons, and checkboxes. Additionally, you have to
    consider the
    different states for each of those elements to ensure that it's accessible:&lt;/p&gt;

  &lt;ol class="blogpost--ol-indent"&gt;
    &lt;li&gt;Default&lt;/li&gt;
    &lt;li&gt;Focus&lt;/li&gt;
    &lt;li&gt;Expanded/toggled/selected&lt;/li&gt;
    &lt;li&gt;Disabled&lt;/li&gt;
  &lt;/ol&gt;

  &lt;p&gt;Now, don't even get me started about what you would have to do to create custom styles for checkboxes or radio
    buttons! For custom checkboxes, you have to ensure that the checkbox aligns with its container and that the user is
    able to select more than one option. For custom radio buttons, on the other hand, you have to worry about the
    opposite and ensure that user can &lt;strong&gt;only&lt;/strong&gt; be able to select one option. Basically, forms are no joke
    and are definitely not something that you should underestimate!&lt;/p&gt;

  &lt;h2&gt;The Basics of Setting Up Forms&lt;/h2&gt;

  &lt;h4&gt;&lt;strong&gt;INPUT FIELDS&lt;/strong&gt;&lt;/h4&gt;
  &lt;hr /&gt;
  &lt;p&gt;There are three things that go into creating a basic, non-CSS styled input field. There should be a &lt;code&gt;&amp;#x3c;form&amp;#x3e;&lt;/code&gt;
    tag
    as the container that holds all the information and enforces semantic HTML, the field label, and the input. The
    input
    usually contains the type, an id, the name (think of this as the purpose of that input), and the placeholder text
    that will be inside of that input field. These labels are all important, as they play into accessibility and the
    way
    that a screen-reader will translate information to those with impairments or disabilities. Take a look at the code
    below:
    &lt;script src="https://gist.github.com/gvaldez8/1615af8befcae87290f0be129f62ebbb.js"&gt;&lt;/script&gt;
  &lt;/p&gt;

  &lt;h4&gt;&lt;strong&gt;DROPDOWNS&lt;/strong&gt;&lt;/h4&gt;
  &lt;hr /&gt;
  &lt;p&gt;Did you know that there are a certain number of options before it &lt;strong&gt;should&lt;/strong&gt; be placed
    into a dropdown? Reference the &lt;a href="https://www.nngroup.com/articles/drop-down-menus/"&gt;Nielsen Norman Group
      Dropdown Guidelines&lt;/a&gt;. Basically, your options should be placed in a dropdown if you have 6–15 options. It
    becomes an issue when the options exceed 15 maximum, as it creates a readability and legibility issue with scanning
    between different options. In the example below, note that the reason that this code is not nested within the &lt;code&gt;&amp;#x3c;form&amp;#x3e;&lt;/code&gt;
    and &lt;code&gt;&amp;#x3c;fieldset&amp;#x3e;&lt;/code&gt; elements is because it's assumed that if you have a dropdown, it will more
    than
    likely
    already be within a form when you're coding.

    &lt;script src="https://gist.github.com/gvaldez8/925939b2fac79f8c3c306483b927261f.js"&gt;&lt;/script&gt;
  &lt;/p&gt;

  &lt;h4&gt;&lt;strong&gt;RADIO BUTTONS&lt;/strong&gt;&lt;/h4&gt;
  &lt;hr /&gt;
  &lt;p&gt;There is a different purpose for when you would use radio buttons as opposed to checkboxes, as they are mutually
    exclusive and &lt;strong&gt;only&lt;/strong&gt; allow the user to select one option. This means that if a user selects one of
    the options, it will automatically deselect the other option. Reference this article from
    &lt;a href="https://www.nngroup.com/articles/checkboxes-vs-radio-buttons/"&gt; Nielsen Norman Group on Checkboxes vs.
      Radio Buttons&lt;/a&gt;. In terms of radio buttons and checkboxes, you will find that the HTML structures are very
    similar to each other. They both start within the &lt;code&gt;&amp;#x3c;form&amp;#x3e;&lt;/code&gt; tag to enforce semantic HTML.
    They
    both
    are contained in a &lt;code&gt;&amp;#x3c;fieldset&amp;#x3e;&lt;/code&gt; element, which is used to group several controls and labels
    within
    a
    form.
    They both
    incorporate the use of the &lt;code&gt;&amp;#x3c;legend&amp;#x3e;&lt;/code&gt; tag, which represents a caption for the content of its
    parent.
    They both require an input type, a label, an id, a value, and a "for" attribute that helps identify what number
    radio button or checkbox you are on. Note that the descriptoins for the value and the label are the same because it
    describes what
    that option is. Here's an example below:
    &lt;script src="https://gist.github.com/gvaldez8/62fdc63e39ac26787e72ce52874323da.js"&gt;&lt;/script&gt;
  &lt;/p&gt;

  &lt;h4&gt;&lt;strong&gt;CHECKBOXES&lt;/strong&gt;&lt;/h4&gt;
  &lt;hr /&gt;
  &lt;p&gt;Aside from the fact that you can select any number of options for checkboxes, you can also specify an additional
    attribute within the input type, which is checked or unchecked. By default, however, you should always have your
    checkboxes unchecked, as this has been proven through user testing. Reference this article from
    &lt;a href="https://www.nngroup.com/articles/checkboxes-vs-radio-buttons/"&gt; Nielsen Norman Group on Checkboxes vs.
      Radio Buttons&lt;/a&gt;. Take a look at the example below:
    &lt;script src="https://gist.github.com/gvaldez8/c3ef891b0c64af616dda3408c5fcc9f5.js"&gt;&lt;/script&gt;
  &lt;/p&gt;


  &lt;h4&gt;&lt;strong&gt;GREAT RESOURCES AND INSPIRATION&lt;/strong&gt;&lt;/h4&gt;
  &lt;hr /&gt;

  &lt;ul class="blogpost--ul-indent"&gt;
    &lt;li&gt;&lt;a href="https://codepen.io/patterns/"&gt;CodePen.io's Patterns&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="https://www.nngroup.com/"&gt;Nielsen Norman Group: World Leaders in Research-Based User Experience&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h2 class="helper-space-top"&gt;An Example of Form Design&lt;/h2&gt;
  &lt;hr /&gt;
  &lt;p&gt;For this week's blog post prompt, I decided that the purpose of this form was for the user to order a pizza.
    Honestly though, who doesn't like pizza?&lt;/p&gt;

  &lt;form class="form__container--personal"&gt;
    &lt;fieldset class="form__pizza--size"&gt;
      &lt;h3&gt;Hi there, I am &lt;input type="text" id="name" name="name" placeholder="name" /&gt;.&lt;br /&gt;

        I would like to order a pizza for delivery at &lt;br /&gt;

        &lt;input type="text" id="address" name="address" placeholder="address" /&gt;by
        &lt;select id="time-select"&gt;
          &lt;option value="500"&gt;5:00pm&lt;/option&gt;
          &lt;option value="530"&gt;5:30pm&lt;/option&gt;
          &lt;option value="600"&gt;6:00pm&lt;/option&gt;
          &lt;option value="630"&gt;6:30pm&lt;/option&gt;
          &lt;option value="700"&gt;7:00pm&lt;/option&gt;
          &lt;option value="730"&gt;7:30pm&lt;/option&gt;
          &lt;option value="800"&gt;8:00pm&lt;/option&gt;
          &lt;option value="830"&gt;8:30pm&lt;/option&gt;
        &lt;/select&gt;.

        &lt;br /&gt;Feel free to give me a ring or shoot me a text at&lt;br /&gt;

        &lt;input type="text" id="phone-number" name="address" placeholder="(000) 000 0000" /&gt; when you're here.&lt;/h3&gt;
    &lt;/fieldset&gt;
  &lt;/form&gt;

  &lt;br /&gt;

  &lt;form class="form__container--order"&gt;
    &lt;fieldset class="form__pizza--size"&gt;
      &lt;legend&gt;
        &lt;h3&gt;What size pizza would you like to order?&lt;/h3&gt;
      &lt;/legend&gt;
      &lt;hr /&gt;
      &lt;div class="radio-buttons"&gt;
        &lt;input type="radio" id="radio-one" value="small" /&gt;
        &lt;label class="radio" for="radio-one"&gt;Small&lt;/label&gt;
        &lt;input type="radio" id="radio-two" value="medium" /&gt;
        &lt;label class="radio" for="radio-two"&gt;Medium&lt;/label&gt;
        &lt;input type="radio" id="radio-three" value="large" /&gt;
        &lt;label class="radio" for="radio-three"&gt;Large&lt;/label&gt;
        &lt;input type="radio" id="radio-four" value="extra-large" /&gt;
        &lt;label class="radio" for="radio-four"&gt;Extra Large&lt;/label&gt;
      &lt;/div&gt;
    &lt;/fieldset&gt;
  &lt;/form&gt;

  &lt;form class="form__container--order"&gt;
    &lt;fieldset class="form__pizza--diet"&gt;
      &lt;legend&gt;
        &lt;h3&gt;Any dietary restrictions?&lt;/h3&gt;
      &lt;/legend&gt;
      &lt;hr /&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-one" value="vegetarian" check="checked" /&gt;
        &lt;label class="checkbox" for="check-one"&gt;Vegetarian&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-two" value="gluten-free" check="checked" /&gt;
        &lt;label class="checkbox" for="check-two"&gt;Gluten Free&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-three" value="vegan" check="checked" /&gt;
        &lt;label class="checkbox" for="check-three"&gt;Vegan&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-four" value="none" check="checked" /&gt;
        &lt;label class="checkbox" for="check-four"&gt;None&lt;/label&gt;
      &lt;/div&gt;
    &lt;/fieldset&gt;
  &lt;/form&gt;

  &lt;form class="form__container--order"&gt;
    &lt;fieldset class="form__pizza--toppings"&gt;
      &lt;legend&gt;
        &lt;h3&gt;Choose your toppings&lt;/h3&gt;
      &lt;/legend&gt;
      &lt;hr /&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-five" value="extra-cheese" check="checked" /&gt;
        &lt;label class="checkbox" for="check-five"&gt;Extra Cheese&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-six" value="black-olives" check="checked" /&gt;
        &lt;label class="checkbox" for="check-six"&gt;Black Olives&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-seven" value="sausage" check="checked" /&gt;
        &lt;label class="checkbox" for="check-seven"&gt;Sausage&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-eight" value="bacon" check="checked" /&gt;
        &lt;label class="checkbox" for="check-eight"&gt;Bacon&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-nine" value="pepperoni" check="checked" /&gt;
        &lt;label class="checkbox" for="check-nine"&gt;Pepperoni&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-ten" value="tomatoes" check="checked" /&gt;
        &lt;label class="checkbox" for="check-ten"&gt;Tomatoes&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-eleven" value="onions" check="checked" /&gt;
        &lt;label class="checkbox" for="check-eleven"&gt;Onions&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-twelve" value="bell-peppers" check="checked" /&gt;
        &lt;label class="checkbox" for="check-twelve"&gt;Bell Peppers&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-thirteen" value="mushrooms" check="checked" /&gt;
        &lt;label class="checkbox" for="check-thirteen"&gt;Mushrooms&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-fourteen" value="pineapple" check="checked" /&gt;
        &lt;label class="checkbox" for="check-fourteen"&gt;Pineapple&lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="checkboxes"&gt;
        &lt;input type="checkbox" id="check-fifteen" value="spinach" check="checked" /&gt;
        &lt;label class="checkbox" for="check-fifteen"&gt;Spinach&lt;/label&gt;
      &lt;/div&gt;
    &lt;/fieldset&gt;

  &lt;/form&gt;

  &lt;button&gt;Submit&lt;/button&gt;

&lt;/main&gt;
</content>
  </entry>
  <entry>
    <title>Naming Conventions related to CSS Architecture</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/10/08/post7.html"/>
    <id>http://blog.url.com/gina-blog/2018/10/08/post7.html</id>
    <published>2018-10-07T19:00:00-05:00</published>
    <updated>2018-11-08T10:49:02-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main&gt;
    &lt;header class="header-main"&gt;
        &lt;h1&gt;Naming Conventions&lt;br /&gt; related to CSS Architecture&lt;/h1&gt;
        &lt;time datetime="2018-10-08"&gt;OCTOBER 8, 2018&lt;/time&gt;
    &lt;/header&gt;

    &lt;p&gt;Think of CSS Architecture like the equivalent of brand style guides but with code. It functions as a set of
        guidelines and best practices that developers can use to write code. Here are some important principles to
        follow
        when using CSS Architecture to create a solid design system:&lt;/p&gt;
    &lt;ol class="blogpost--ol-columns"&gt;
        &lt;li&gt;&lt;strong&gt;Modularity — &lt;/strong&gt;This is a core principle, which basically means that your code is written in
            a way that anyone
            can
            open that file, edit that code, and understand the structure without encountering a huge learning curve. It
            means
            that it can be easily managed and edited by an individual or by a large engineering team.&lt;/li&gt;

        &lt;li&gt;&lt;strong&gt;MMaintainable — &lt;/strong&gt;This principle is exactly as it sounds. It means that if you add, update,
            or
            rearrange new
            components and features, integration shouldn't completely break your page or require extensive refactoring.&lt;/li&gt;

        &lt;li&gt;&lt;strong&gt;Predictable/Flexible — &lt;/strong&gt;This means that your code behaves as you'd expect. It means that
            when you
            add or
            update a
            rule, it shouldn't affect other parts of your site. Although this might not be as detrimental to a smaller
            site, it
            could definitely be problematic on a larger site with anywhere from tens to hundreds of pages.&lt;/li&gt;

        &lt;li&gt;&lt;strong&gt;Reusable — &lt;/strong&gt;This principle dictates that you should not have to recode patterns or
            problems that
            you've
            already
            solved by enforcing the DRY (Don't Repeat Yourself) principle. It means that while you're coding, you
            should
            consider the other possible situations that you might use that code and be mindful of not assigning names
            to
            selectors, classes, or id's that are too specific (i.e. "blue box").&lt;/li&gt;
    &lt;/ol&gt;


    &lt;p&gt;Now that we understand the principles that compose good CSS Architecture, there are three types of naming
        conventions that will help us build a solid foundation for our CSS architecture that
        we'll cover in this post: BEM,
        OOCSS, and SMACSS.&lt;/p&gt;
    &lt;h2&gt;What is BEM?&lt;/h2&gt;
    &lt;hr /&gt;
    &lt;p&gt;The BEM naming convention stands for &lt;em&gt;Block Element Modifier&lt;/em&gt; and is currently the naming convention
        that
        8th Light sticks to. Reasons that people like this naming convention are because its name declares its
        purpose,
        thereby making it easier to skim markup and immediately understand how elements are styled or related to
        one
        another. The point is to keep the names simple, clear, and precise.&lt;/p&gt;
    &lt;div class="column"&gt;
        &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;THE GUIDELINES&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;ol class="blogpost--ol-columns"&gt;
            &lt;li&gt;Names are written in lowercase&lt;/li&gt;
            &lt;li&gt;Words are separated by a hyphen&lt;/li&gt;
            &lt;li&gt;Block name defines the namespace for its elements and modifiers&lt;/li&gt;
            &lt;li&gt;The element is separated from the block name by a double underscore&lt;/li&gt;
            &lt;li&gt;The modifier name is separated from the block or element name by a single underscore&lt;/li&gt;
            &lt;li&gt;The modifier value is separated from the modifier name by a single underscore, double hyphen, or
                period&lt;/li&gt;
            &lt;li&gt;For boolean modifiers, the value is not included in the name&lt;/li&gt;
        &lt;/ol&gt;
        &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;BENEFITS&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;ul class="blogpost--ul-columns"&gt;
            &lt;li&gt;Works nicely with React&lt;/li&gt;
            &lt;li&gt;Naming things is easy&lt;/li&gt;
            &lt;li&gt;No more classname conflicts&lt;/li&gt;
            &lt;li&gt;Reusability out of the box&lt;/li&gt;
            &lt;li&gt;No specificity races&lt;/li&gt;
            &lt;li&gt;No unexpected side-effects&lt;/li&gt;
            &lt;li&gt;Confidence in changing old css code&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;

    &lt;section&gt;
        &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;HOW IT WORKS&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;p&gt;The block is the whole and the elements are the pieces.&lt;/p&gt;
        &lt;code&gt;.block&lt;/code&gt;
        &lt;p&gt;Each element is written after the block connected by two underscores.&lt;/p&gt;
        &lt;code&gt;.block__element&lt;/code&gt;
        &lt;p&gt;Modifiers are used to style a specific element and are usually separated by a double hyphen after the
            element
            like so:&lt;/p&gt;
        &lt;code&gt;.block__elem--mod&lt;/code&gt;
    &lt;/section&gt;

    &lt;section&gt;
        &lt;h2 class="helper-space-top"&gt;What is OOCSS?&lt;/h2&gt;
        &lt;hr /&gt;
        &lt;p&gt;OSCSS stands for &lt;em&gt;Object oriented CSS&lt;/em&gt;. The object refers to any repeating visual pattern than
            can be
            specified in snippets of code. The goal of OOCSS is to produce components that are flexible, modular,
            and
            interchangeable.&lt;/p&gt;

        &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;THE GUIDELINES&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;ol class="blogpost--ol-indent"&gt;
            &lt;li&gt;Separation of Structure and Skin&lt;/li&gt;
            &lt;li&gt;Separation of Container and Content&lt;/li&gt;
        &lt;/ol&gt;

        &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;STRUCTURE VS. SKIN&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;p&gt;The &lt;strong&gt;structure&lt;/strong&gt; of an application refers to anything that is “invisible” to the user,
            such as
            instructions for element size and positioning. It refers to &lt;strong&gt;how things are laid out&lt;/strong&gt;
            like:&lt;/p&gt;
        &lt;ol class="blogpost--ol-indent"&gt;
            &lt;li&gt;height and width&lt;/li&gt;
            &lt;li&gt;margins and padding&lt;/li&gt;
            &lt;li&gt;overflow&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p&gt;The &lt;strong&gt;skin&lt;/strong&gt; is something that users are generally more familiar with, as it refers to
            the
            visual properties of elements. It refers to &lt;strong&gt;what the layout looks like&lt;/strong&gt;:&lt;/p&gt;
        &lt;ol class="blogpost--ol-columns"&gt;
            &lt;li&gt;colors&lt;/li&gt;
            &lt;li&gt;fonts&lt;/li&gt;
            &lt;li&gt;shadows&lt;/li&gt;
            &lt;li&gt;gradients&lt;/li&gt;
        &lt;/ol&gt;

        &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;CONTAINER VS. CONTENT&lt;/strong&gt;&lt;/h5&gt;
        &lt;hr /&gt;
        &lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt; refers to elements such as images, paragraphs, and div tags that are nested
            within
            other elements, which serve as containers.&lt;/p&gt;

        &lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt; can be represented by a structure class.&lt;/p&gt;
    &lt;/section&gt;

    &lt;section&gt;
        &lt;h2 class="helper-space"&gt;What is SMACSS?&lt;/h2&gt;
        &lt;hr /&gt;
        &lt;p&gt;SMACSS stands for &lt;em&gt;Scalable and Modular Architecture for CSS&lt;/em&gt; and is more of a
            style guide than it is a rigid framework. The purpose of this category is to codify patterns, things
            that
            repeat themselves within our design, and avoid mixing code of several categories into a single file.&lt;/p&gt;
        &lt;div class="column"&gt;
            &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;THE GUIDELINES IN FIVE CATEGORIES&lt;/strong&gt;&lt;/h5&gt;
            &lt;hr /&gt;
            &lt;ol class="blogpost--ol-columns"&gt;
                &lt;li&gt;&lt;strong&gt;Base:&lt;/strong&gt; These are default values, so things like padding, margin border, font
                    and
                    other
                    properties that are used on the entire website and all elements.&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Layout:&lt;/strong&gt; Divides a page into sections with elements like header, footer, and
                    article.
                    Often developers show layout elements by prefixing the class with l, i.e.`l-header` or
                    `l-footer`&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Modules:&lt;/strong&gt; The reusable, modular elements in the design like the navbar,
                    sidebar,
                    and
                    elements that are repeated on the site.&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;State:&lt;/strong&gt; Describes how our modules or layouts will look when they are in a
                    particular
                    state (i.e. active, inactive, expanded, hidden). These are usually prefixed with `is-`.
                    Examples
                    would
                    be: `is-active`, `is-inactive`, `is-expanded`, and `is-hidden`&lt;/li&gt;
                &lt;li&gt;&lt;strong&gt;Theme:&lt;/strong&gt; Similar to state rules in that they describe how modules or layouts
                    might
                    look.
                    However, it is more applicable for larger sites with shared elements that look different
                    throughout,
                    such as color scheme or type treatment.&lt;/li&gt;
            &lt;/ol&gt;

            &lt;h5 class="helper-space-top"&gt;&lt;strong&gt;THE GOALS&lt;/strong&gt;&lt;/h5&gt;
            &lt;hr /&gt;
            &lt;ol class="blogpost--ol-columns"&gt;
                &lt;li&gt;Repetition results in less code&lt;/li&gt;
                &lt;li&gt;Easier maintenance&lt;/li&gt;
                &lt;li&gt;Greater consistency in the user experience&lt;/li&gt;
            &lt;/ol&gt;
        &lt;/div&gt;
    &lt;/section&gt;
&lt;/main&gt;
</content>
  </entry>
  <entry>
    <title>Getting Responsive with Media Queries</title>
    <link rel="alternate" href="http://blog.url.com/gina-blog/2018/10/03/post6.html"/>
    <id>http://blog.url.com/gina-blog/2018/10/03/post6.html</id>
    <published>2018-10-02T19:00:00-05:00</published>
    <updated>2018-11-08T10:51:52-06:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;main class="blogposts__container"&gt;
    &lt;header&gt;
        &lt;h1&gt;Getting Responsive with Media Queries&lt;/h1&gt;
        &lt;time datetime="2018-10-03"&gt;OCTOBER 3, 2018&lt;/time&gt;
    &lt;/header&gt;
    &lt;p&gt;Before we deep dive into the purpose of mobile first design/development, media queries, and how to apply them,
        we need to understand what responsive web design is and its purpose.&lt;/p&gt;

    &lt;h3 class="helper-space-top"&gt;Responsive Web Design&lt;/h3&gt;
    &lt;hr /&gt;

    &lt;p&gt;Responsive web design (RWD) is designing online experiences that adapt to various screen sizes, platforms, and
        orientations according to user environments. For example, you might use your phone on the train as opposed to
        your desktop that you use when you're working in the office. You may use a tablet or a kindle to stream movies,
        play video games, and read e-books.Responsive web design requires the use of CSS media queries—powerful
        snippets of code that define "breakpoints"—to create flexible grids, layouts, and images that resize and
        rearrange content (media, images, text, forms) to account for various screen sizes. &lt;strong&gt;Breakpoints&lt;/strong&gt;
        are the point (in pixels) in which content will resize and rearrange itself to a layout that provides the best
        experience according to a user's environment. Here's an example below of both responsive web design,
        breakpoints, and how the layouts change accordingly (from left to right: desktop, tablet, mobile):&lt;/p&gt;


    &lt;div class="blogposts__images"&gt;
        &lt;img src="/images/responsive_desktop.png" height="30%" width="32%" /&gt;
        &lt;img src="/images/responsive_tablet.png" height="2%" width="32%%" /&gt;
        &lt;img src="/images/responsive_mobile.png" height="2%" width="32%" /&gt;
    &lt;/div&gt;

    &lt;h3 class="helper-space-top"&gt;Mobile First Design and Development&lt;/h3&gt;
    &lt;hr /&gt;


    &lt;p&gt;Mobile first design is when you prioritize designing for mobile before considering the designs of the other
        screen sizes, like tablet and desktop. One reason for doing so is because mobile usage as opposed to desktop
        usage has increased dramatically. Another reason that it's important is because it helps in selecting and
        providing only the most essential information. The reason behind this methodology is to account for the user's
        environment—they could be traveling or commuting, casually walking down the street, lounging around in bed, or
        even just on the couch in the comfort of their own living room—when interacting with an online experience
        through mobile. Regardless of where your user might be, their level of focus will ultimately adjust according
        to the environment. There is also less real estate on a smaller screen. Hence, the reason that the design needs
        to facilitate that online experience by providing a quick, easily accessible way to locate the information that
        they need and process it within a limited amount of time. &lt;/p&gt;

    &lt;p&gt;Amongst the benefits of focusing on mobile first design is that it is more time efficient and can help to
        facilitate discussions between stakeholders, product managers, designers, and developers on what information
        needs to be emphasized and prioritized. It also helps your team understand what is possible according to the
        limitations of code. Mobile first development, on the other hand, is the actual execution of the visual design
        for mobile translated into code using CSS media queries and breakpoints.&lt;/p&gt;



    &lt;h3 class="helper-space-top"&gt;Media Queries&lt;/h3&gt;
    &lt;hr /&gt;

    &lt;p&gt;Media queries are a feature of CSS that enables web content (media, images, text, forms) to adapt according to
        different devices, screen sizes, and resolutions. Basically, media queries are what make responsive web design
        possible. Media queries are called upon in your stylesheets using the &lt;code&gt;@media&lt;/code&gt; rule, followed by a
        breakpoint, and are nested within a specific CSS property that you want to resize or rearrange.&lt;/p&gt;

    &lt;p&gt;The @media rule is followed by a (max-width) or (min-width). It looks like this:&lt;/p&gt;

    &lt;code&gt;@media (max-width: breakpoint in pixels)&lt;/code&gt;&lt;br /&gt;

    &lt;code&gt;@media (min-width: breakpoint in pixels)&lt;/code&gt;

    &lt;p&gt;So, what's the difference? &lt;strong&gt;Max-width&lt;/strong&gt; defines anything below that breakpoint, whereas &lt;strong&gt;min-width&lt;/strong&gt;
        defines anything above the breakpoint. Note that it is best practice to use min-width.&lt;/p&gt;



    &lt;h3 class="helper-space-top"&gt;Defining Breakpoints&lt;/h3&gt;
    &lt;hr /&gt;

    &lt;p&gt;Now, let's quickly review what breakpoints are:&lt;/p&gt;

    &lt;blockquote&gt;Breakpoints are the point (in pixels) in which content will resize and rearrange itself to a layout
        that provides the best experience according to a user's environment.&lt;/blockquote&gt;

    &lt;p&gt;Breakpoints used to be strictly defined according to standard screen sizes: &lt;/p&gt;
    &lt;ul class="blogpost--ul-indent"&gt;
        &lt;li&gt;Mobile (usually the iPhone at 320px and 480px)&lt;/li&gt;
        &lt;li&gt;Tablet (usually the iPad at 768px and 1024px)&lt;/li&gt;
        &lt;li&gt;Desktop (above 1024px)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;However, today technology advances far too quickly with new devices and screen sizes being released into the
        market every year, so there are far too many to account for between iOS and Android.When determining suitable
        breakpoints, you should instead, think more about designing for humans and selecting those breakpoints
        intuitively according to how the content (media, images, text, forms) resizes and rearranges itself according
        to how the browser width is resized. Also, a good place to start is the aforementioned: designing and
        developing for mobile first. It is always best to start with the smallest viewport first. "Viewport" is just a
        fancy term referring to your screen size. &lt;/p&gt;



    &lt;h3 class="helper-space-top"&gt;Bringing It Together: Using Media Queries and Breakpoints&lt;/h3&gt;
    &lt;hr /&gt;

    &lt;p&gt;As we covered earlier, media queries are called upon using the &lt;code&gt;@media&lt;/code&gt; rule, followed by the
        breakpoint (defined in pixels), and nested under the CSS property in your stylesheet that you would like to be
        resized and/or rearranged.&lt;/p&gt;


    &lt;ol class="blogpost--ol-indent"&gt;
        &lt;li&gt;However, the very first thing that you should do is open up your HTML file and insert a self-closing &lt;code&gt;meta&lt;/code&gt;
            within the &lt;code&gt;head&lt;/code&gt;. Here's an example below of what that might look like:
            &lt;script src="https://gist.github.com/gvaldez8/bfddef3b26ee2c56b74cc3fb47946204.js"&gt;&lt;/script&gt;
        &lt;/li&gt;

        &lt;li&gt;Open up your stylesheet, select a CSS property that you would like to resize and/or rearrange, and add the
            &lt;code&gt;@media&lt;/code&gt; rule followed by (min-width: breakpoint in pixels). For the mobile breakpoint, a great
            place to
            start
            would be with 320px.&lt;/li&gt;


        &lt;li&gt;To determine your other breakpoints, start resizing your browser width. Observe any awkward instances for
            type
            sizes, images, and layouts.&lt;/li&gt;
        &lt;li&gt;Once you identify your breakpoints, plug those numbers (in pixels) into the &lt;code&gt;@media&lt;/code&gt; rule like
            so:
            &lt;script src="https://gist.github.com/gvaldez8/2390105fa00ffc79b62553dd8bdd9bf4.js"&gt;&lt;/script&gt;
        &lt;/li&gt;
        &lt;li&gt;Congratulations! You just made a media query and made one element of your page responsive! Keep in mind
            that you will have to follow this process for every element or div that you would like to change as the
            browser resizes.
        &lt;/li&gt;
    &lt;/ol&gt;
&lt;/main&gt;
</content>
  </entry>
</feed>
